msgid ""
msgstr ""
"Project-Id-Version: doma-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-17 13:53+0000\n"
"PO-Revision-Date: 2024-03-20 12:38\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: doma-docs\n"
"X-Crowdin-Project-ID: 657384\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /_build/gettext/domain.pot\n"
"X-Crowdin-File-ID: 162\n"
"Language: ja_JP\n"

#: ../../domain.rst:3
msgid "Domain classes"
msgstr "ドメインクラス"

#: ../../domain.rst:6
msgid "Contents"
msgstr "コンテンツ"

#: ../../domain.rst:8
msgid "A domain class represents a table column and it allows you to handle the column value as a Java object. In the Doma framework, a **domain** means all the values which a data type may contain. In short, a domain class is a user defined class that can be map to a column. The use of the domain classes is optional."
msgstr "ドメインクラスはデータベースのカラムを表し、カラムの値を Java オブジェクトとして処理できるようにします。 Doma フレームワークでは、**ドメイン** はデータ型に含まれる可能性のあるすべての値を意味します。つまり、ドメインクラスは、カラムにマップできるユーザー定義のクラスです。ドメインクラスの使用はオプションです。"

#: ../../domain.rst:13
msgid "Every domain class is either an internal domain class or an external domain class."
msgstr "すべてのドメインクラスは、内部ドメインクラスまたは外部ドメインクラスのいずれかです。"

#: ../../domain.rst:16
msgid "Internal domain classes"
msgstr "内部ドメインクラス"

#: ../../domain.rst:18
msgid "The internal domain class must be annotated with ``@Domain``. The ``@Domain``'s ``valueType`` element corresponds to a data type of a column. Specify any type of :doc:`basic` to the ``valueType`` element."
msgstr "内部ドメインクラスには ``@Domain`` アノテーションを付ける必要があります。 ``@Domain`` の ``valueType`` 要素は、カラムのデータ型に対応します。 ``valueType`` 要素には任意のタイプの :doc:`basic` を指定します。"

#: ../../domain.rst:23
msgid "Instantiation with a constructor"
msgstr "コンストラクタを使用したインスタンス化"

#: ../../domain.rst:25
msgid "The default value of the ``@Domain``'s ``factoryMethod`` element is ``new``. The value ``new`` means that the object of annotated class is created with a constructor."
msgstr "``@Domain`` の ``factoryMethod`` 要素のデフォルト値は ``new`` です。値 ``new`` は、アノテーションが付けられたクラスのオブジェクトがコンストラクタを使用して作成されることを意味します。"

#: ../../domain.rst:49
msgid "In Java 14 and later version, you can annotate `records`_ with ``@Domain``:"
msgstr "Java 14 以降のバージョンでは、`records`_ に ``@Domain`` アノテーションを付けることができます。"

#: ../../domain.rst:64
msgid "To annotate records with ``@Domain`` is a little redundant, because you must specify some properties to ``@Domain`` such as ``valueType``. Instead of ``@Domain``, you can annotate records with ``@DataType``:"
msgstr "レコードに ``@Domain`` アノテーションを付けるのは少し冗長です。 ``valueType`` などのいくつかのプロパティを明示的に ``@Domain`` に指定する必要があるためです。 ``@Domain`` の代わりに、レコードに ``@DataType`` アノテーションを付けることができます。"

#: ../../domain.rst:79
msgid "Instantiation with a static factory method"
msgstr "静的ファクトリメソッドによるインスタンス化"

#: ../../domain.rst:81
msgid "To create the object of annotated class with a static factory method, specify the method name to the ``@Domain``'s ``factoryMethod`` element."
msgstr "アノテーションが付与されたクラスのオブジェクトを静的ファクトリメソッドで作成するには、 ``@Domain`` の ``factoryMethod`` 要素にメソッド名を指定します。"

#: ../../domain.rst:84
msgid "The method must be static and non-private:"
msgstr "メソッドは静的で非プライベートである必要があります。"

#: ../../domain.rst:110
msgid "With a static factory method, you can apply the ``@Domain`` annotation to enum types:"
msgstr "静的ファクトリメソッドを使用すると、``@Domain`` アノテーションを列挙型に適用できます。"

#: ../../domain.rst:143
msgid "Using type parameters in internal domain classes"
msgstr "内部ドメインクラスにおける型パラメータの使用"

#: ../../domain.rst:145
msgid "All internal domain class declarations have type parameters:"
msgstr "内部ドメインクラスには任意の数の型パラメータを宣言できます。"

#: ../../domain.rst:164
msgid "When you create the object of annotated class with a static factory method, the method declaration must have same type parameters that are declared in the class declaration:"
msgstr "静的ファクトリメソッドを使用してアノテーション付きクラスのオブジェクトを作成する場合、メソッド宣言にはクラス宣言と同じ型パラメータが必要です。"

#: ../../domain.rst:188
msgid "External domain classes"
msgstr "外部ドメインクラス"

#: ../../domain.rst:190
msgid "This feature allows you to define arbitrary classes as domain classes, even if the classes can be annotated with the ``@Domain`` annotation."
msgstr "この機能を使用すると、クラスに ``@Domain`` アノテーションを付けられない場合でも、任意のクラスをドメインクラスとして定義できます。"

#: ../../domain.rst:193
msgid "To define external domain classes, you have to do as follows:"
msgstr "外部ドメイン クラスを定義するには、次のようにします。"

#: ../../domain.rst:195
msgid "Create a class that implements ``org.seasar.doma.jdbc.domain.DomainConverter`` and annotate ``@ExternalDomain`` to the class"
msgstr "``org.seasar.Doma.jdbc.domain.DomainConverter`` を実装するクラスを作成し、クラスに ``@ExternalDomain`` アノテーションを付ける"

#: ../../domain.rst:197
msgid "Create a class that is annotated with ``@DomainConverters``"
msgstr "``@DomainConverters`` アノテーションを付けたクラスを作成する"

#: ../../domain.rst:198
msgid "Specify the class annotated with ``@ExternalDomain`` to the ``@DomainConverters``'s ``value`` element"
msgstr "``@DomainConverters`` の ``value`` 要素に ``@ExternalDomain`` アノテーションを付けたクラスを指定する"

#: ../../domain.rst:199
msgid "Specify the full qualified name of the class annotated with ``@DomainConverters`` to the option of :doc:`annotation-processing`"
msgstr ":doc:`annotation-processing` のオプションに ``@DomainConverters`` アノテーションを付けたクラスの完全修飾名を指定する"

#: ../../domain.rst:202
msgid "Suppose, for instance, there is the ``PhoneNumber`` class that you can change:"
msgstr "たとえば、ソースコードを変更でない ``PhoneNumber`` クラスがあるとします。"

#: ../../domain.rst:223
msgid "First, to define the ``PhoneNumber`` class as an external domain class, create following class:"
msgstr "まず、``PhoneNumber`` クラスを外部ドメインクラスとして定義するために、次のクラスを作成します。"

#: ../../domain.rst:242
msgid "Then create following class and specify the above class to the ``@DomainConverters``'s ``value`` element:"
msgstr "次に、次のクラスを作成し、上記のクラスを ``@DomainConverters`` の ``value`` 要素に指定します。"

#: ../../domain.rst:250
msgid "Finally, specify the full qualified name of the above class to the option of :doc:`annotation-processing`. If you use Gradle, specify the option in the build script as follows:"
msgstr "最後に、:doc:`annotation-processing` のオプションに上記クラスの完全修飾名を指定します。 Gradle を使用する場合は、ビルド スクリプトで次のようにオプションを指定します。"

#: ../../domain.rst:262
msgid "Using type parameters in external domain classes"
msgstr "外部ドメインクラスにおける型パラメータの使用"

#: ../../domain.rst:264
msgid "All external domain class declarations have type parameters:"
msgstr "外部ドメインクラスには任意の数の型パラメータを宣言できます。"

#: ../../domain.rst:281
msgid "In the ``DomainConverter`` implementation class, specify a wildcard ``?`` as type arguments to the external domain class:"
msgstr "``DomainConverter`` 実装クラスで、外部ドメインクラスへの型引数としてワイルドカード ``?`` を指定します。"

#: ../../domain.rst:303
msgid "Example"
msgstr "例"

#: ../../domain.rst:305
msgid "The Domain classes showed above are used as follows:"
msgstr "上記のドメインクラスは次のように使用されます。"

