msgid ""
msgstr ""
"Project-Id-Version: doma-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-19 20:27+0900\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: doma-docs\n"
"X-Crowdin-Project-ID: 657384\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File-ID: 184\n"
"Language: ja_JP\n"

#: ../../criteria-api.rst:3
msgid "Criteria API"
msgstr ""

#: ../../criteria-api.rst:6
msgid "Contents"
msgstr "コンテンツ"

#: ../../criteria-api.rst:9
msgid "Introduction"
msgstr "イントロダクション"

#: ../../criteria-api.rst:13
msgid "In Kotlin environment, use Kotlin specific DSLs instead of the following DSLs. See :ref:`kotlin-specific-criteria-api`."
msgstr "Kotlin 環境では、次の DSL の代わりに Kotlin 固有の DSL を使用できます。 :ref:`kotlin-specific-criteria-api` を参照してください。"

#: ../../criteria-api.rst:16
msgid "There are two kinds of DSLs in the Criteria API:"
msgstr "Criteria API には 2 種類の DSL があります。"

#: ../../criteria-api.rst:18
msgid "The Entityql DSL"
msgstr "Entityql DSL"

#: ../../criteria-api.rst:19
msgid "The NativeSql DSL"
msgstr "NativeSql DSL"

#: ../../criteria-api.rst:21
msgid "Both requires predefined Entity classes and metamodel classes."
msgstr "どちらも、事前定義されたエンティティクラスとメタモデルクラスを必要とします。"

#: ../../criteria-api.rst:23
msgid "We use the following Entity classes to show you some examples:"
msgstr "次のエンティティクラスを使用して、いくつかの例を示します。"

#: ../../criteria-api.rst:99
msgid "Note that the above classes are annotated with ``@Entity(metamodel = @Metamodel)``. The ``metamodel = @Metamodel`` indicates that the annotated entity has a corresponding metamodel class generated by Doma's annotation processor ."
msgstr "上記のクラスには ``@Entity(metamodel = @Metamodel)`` というアノテーションが付けられていることに注意してください。 ``metamodel = @Metamodel`` は、エンティティクラスに対応するメタモデルクラスをDoma の アノテーションプロセッサー により生成することを示します。"

#: ../../criteria-api.rst:103
msgid "In our examples, the metamodel classes are ``Employee_``, ``Department_``, ``Emp_`` and ``Dept_``. These metamodels allow you to make your query typesafe."
msgstr "この例では、メタモデルクラスは ``Employee_``、``Department_``、``Emp_``、および ``Dept_`` です。これらのメタモデルクラスを使用すると、クエリをタイプセーフに構築できます。"

#: ../../criteria-api.rst:106
msgid "You can customize the name of the metamodels by the Metamodel annotation elements."
msgstr "メタモデルの名前は、メタモデルのアノテーション要素によってカスタマイズできます。"

#: ../../criteria-api.rst:108
msgid "To customize all metamodels in bulk, you can use the annotation processor options. See :doc:`annotation-processing` and check the following options:"
msgstr "すべてのメタモデルを一括でカスタマイズするには、アノテーションプロセッサのオプションを使用できます。 :doc:`annotation-processing` を参照して、次のオプションを確認してください。"

#: ../../criteria-api.rst:111
msgid "doma.metamodel.enabled"
msgstr ""

#: ../../criteria-api.rst:112
msgid "doma.metamodel.prefix"
msgstr "doma.metamodel.prefix"

#: ../../criteria-api.rst:113
msgid "doma.metamodel.suffix"
msgstr "doma.metamodel.suffix"

#: ../../criteria-api.rst:116
msgid "Entityql DSL"
msgstr ""

#: ../../criteria-api.rst:118
msgid "The Entityql DSL can query and associate entities. The entry point is the ``org.seasar.doma.jdbc.criteria.Entityql`` class. This class has the following methods:"
msgstr "Entityql DSL は、エンティティをクエリして関連付けることができます。エントリポイントは ``org.seasar.doma.jdbc.criteria.Entityql`` クラスです。このクラスには次のメソッドがあります。"

#: ../../criteria-api.rst:122
#: ../../criteria-api.rst:173
msgid "from"
msgstr ""

#: ../../criteria-api.rst:123
#: ../../criteria-api.rst:175
msgid "insert"
msgstr "insert"

#: ../../criteria-api.rst:124
#: ../../criteria-api.rst:174
msgid "delete"
msgstr "delete"

#: ../../criteria-api.rst:125
#: ../../criteria-api.rst:176
msgid "update"
msgstr "update"

#: ../../criteria-api.rst:127
msgid "You can instantiate the ``Entityql`` class as follows:"
msgstr "次のように ``Entityql`` クラスをインスタンス化できます。"

#: ../../criteria-api.rst:133
msgid "For example, to query ``Employee`` and ``Department`` entities and associate them, write as follows:"
msgstr "たとえば、 ``Employee`` エンティティと ``Department`` エンティティをクエリしてそれらを関連付けるには、次のように記述します。"

#: ../../criteria-api.rst:154
#: ../../criteria-api.rst:201
#: ../../criteria-api.rst:367
#: ../../criteria-api.rst:391
#: ../../criteria-api.rst:417
#: ../../criteria-api.rst:442
#: ../../criteria-api.rst:457
#: ../../criteria-api.rst:486
#: ../../criteria-api.rst:556
#: ../../criteria-api.rst:579
#: ../../criteria-api.rst:646
#: ../../criteria-api.rst:666
#: ../../criteria-api.rst:702
#: ../../criteria-api.rst:758
#: ../../criteria-api.rst:864
#: ../../criteria-api.rst:880
#: ../../criteria-api.rst:929
#: ../../criteria-api.rst:972
#: ../../criteria-api.rst:1001
#: ../../criteria-api.rst:1020
#: ../../criteria-api.rst:1048
#: ../../criteria-api.rst:1079
#: ../../criteria-api.rst:1174
#: ../../criteria-api.rst:1249
#: ../../criteria-api.rst:1279
#: ../../criteria-api.rst:1354
#: ../../criteria-api.rst:1385
#: ../../criteria-api.rst:1436
#: ../../criteria-api.rst:1460
#: ../../criteria-api.rst:1586
#: ../../criteria-api.rst:1628
#: ../../criteria-api.rst:1671
#: ../../criteria-api.rst:1704
#: ../../criteria-api.rst:1725
#: ../../criteria-api.rst:1763
#: ../../criteria-api.rst:1806
#: ../../criteria-api.rst:1850
#: ../../criteria-api.rst:1890
msgid "The above query issues the following SQL statement:"
msgstr "上記のクエリは次の SQL ステートメントを発行します。"

#: ../../criteria-api.rst:165
msgid "NativeSql DSL"
msgstr ""

#: ../../criteria-api.rst:167
msgid "The NativeSql DSL can issue more complex SQL statements rather than the Entityql DSL. But note that the NativeSql DSL doesn't support to associate entities."
msgstr "NativeSql DSL は、Entityql DSL よりも複雑な SQL ステートメントを発行できます。ただし、NativeSql DSL はエンティティの関連付けをサポートしていないことに注意してください。"

#: ../../criteria-api.rst:170
msgid "The entry point is the ``org.seasar.doma.jdbc.criteria.NativeSql`` class. This class has the following methods:"
msgstr "エントリポイントは ``org.seasar.doma.jdbc.criteria.NativeSql`` クラスです。このクラスには次のメソッドがあります。"

#: ../../criteria-api.rst:178
msgid "You can instantiate the ``NativeSql`` class as follows:"
msgstr "次のように ``NativeSql`` クラスをインスタンス化できます。"

#: ../../criteria-api.rst:184
msgid "For example, to query two columns with GROUP BY and HAVING clauses, write as follows:"
msgstr "たとえば、GROUP BY 句と HAVING 句を使用して 2 つの列をクエリするには、次のように記述します。"

#: ../../criteria-api.rst:212
msgid "The difference between two DSLs"
msgstr "2 つの DSL の違い"

#: ../../criteria-api.rst:214
msgid "The biggest difference between two DSLs is that the Entityql DSL removes duplicated data from the fetched results, but the NativeSQL DSL doesn't."
msgstr "2 つの DSL の最大の違いは、Entityql DSL はフェッチされた結果から重複データを削除しますが、NativeSQL DSL は削除しないことです。"

#: ../../criteria-api.rst:217
msgid "See the following example:"
msgstr "次の例を参照してください。"

#: ../../criteria-api.rst:235
msgid "Both (1) and (2) issue the same SQL statement as follows:"
msgstr "(1) と (2) の両方とも、以下のように同じ SQL ステートメントを発行します。"

#: ../../criteria-api.rst:243
msgid "The ResultSet contains 14 rows, but the Entityql DSL returns only 3 rows because it removes duplicate Department entities. The Entityql DSL uses the id properties to know the uniqueness of the entities."
msgstr "ResultSet には 14 行が含まれていますが、Entityql DSL は重複するDepartment エンティティを削除するため、3 行のみを返します。 Entityql DSL は、id プロパティを使用してエンティティの一意性を認識します。"

#: ../../criteria-api.rst:247
msgid "On the other hand, the NativeSql DSL returns the data as it retrieves from the database. It puts results into entity objects, but it handles them as the plain DTOs."
msgstr "一方、NativeSql DSL は、データベースから取得したデータを返します。結果はエンティティオブジェクトに格納されますが、それらはプレーンな DTO として処理されます。"

#: ../../criteria-api.rst:251
msgid "Select statement"
msgstr "Select ステートメント"

#: ../../criteria-api.rst:254
msgid "Select settings (Entityql, NativeSql)"
msgstr "Select 設定 (Entityql, NativeSql)"

#: ../../criteria-api.rst:256
#: ../../criteria-api.rst:1205
#: ../../criteria-api.rst:1291
#: ../../criteria-api.rst:1524
msgid "We support the following settings:"
msgstr "次の設定をサポートしています。"

#: ../../criteria-api.rst:258
#: ../../criteria-api.rst:1207
#: ../../criteria-api.rst:1526
msgid "allowEmptyWhere"
msgstr ""

#: ../../criteria-api.rst:259
#: ../../criteria-api.rst:1209
#: ../../criteria-api.rst:1293
#: ../../criteria-api.rst:1528
msgid "comment"
msgstr ""

#: ../../criteria-api.rst:260
msgid "fetchSize"
msgstr ""

#: ../../criteria-api.rst:261
msgid "maxRows"
msgstr ""

#: ../../criteria-api.rst:262
#: ../../criteria-api.rst:1211
#: ../../criteria-api.rst:1294
#: ../../criteria-api.rst:1530
msgid "queryTimeout"
msgstr ""

#: ../../criteria-api.rst:263
#: ../../criteria-api.rst:1212
#: ../../criteria-api.rst:1295
#: ../../criteria-api.rst:1531
msgid "sqlLogType"
msgstr ""

#: ../../criteria-api.rst:265
msgid "They are all optional. You can apply them as follows:"
msgstr "これらはすべてオプションです。それらは次のように適用できます。"

#: ../../criteria-api.rst:282
msgid "Fetching (Entityql, NativeSql)"
msgstr "フェッチ (Entityql、NativeSql)"

#: ../../criteria-api.rst:284
msgid "Both Entityql DSL and NativeSql DSL support the following methods to fetch data from a database:"
msgstr "Entityql DSL と NativeSql DSL はどちらも、データベースからデータをフェッチする次のメソッドをサポートしています。"

#: ../../criteria-api.rst:286
msgid "fetch"
msgstr ""

#: ../../criteria-api.rst:287
msgid "fetchOne"
msgstr ""

#: ../../criteria-api.rst:288
msgid "fetchOptional"
msgstr ""

#: ../../criteria-api.rst:289
msgid "stream"
msgstr ""

#: ../../criteria-api.rst:313
msgid "Streaming (NativeSql)"
msgstr "ストリーミング (NativeSql)"

#: ../../criteria-api.rst:315
msgid "The NativeSql DSL supports the following methods:"
msgstr "NativeSql DSL は次のメソッドをサポートしています。"

#: ../../criteria-api.rst:317
msgid "mapStream"
msgstr ""

#: ../../criteria-api.rst:318
msgid "collect"
msgstr ""

#: ../../criteria-api.rst:319
msgid "openStream"
msgstr ""

#: ../../criteria-api.rst:344
msgid "These methods handle the stream that wraps a JDBC ResultSet. So they are useful to process a large ResultSet effectively."
msgstr "これらのメソッドは、JDBC ResultSet をラップするストリームを処理します。したがって、これらは大規模な ResultSet を効率的に処理するのに役立ちます。"

#: ../../criteria-api.rst:348
msgid "Select expression"
msgstr "Select 式"

#: ../../criteria-api.rst:351
msgid "Entity selection (Entityql, NativeSql)"
msgstr "エンティティの検索 (Entityql、NativeSql)"

#: ../../criteria-api.rst:353
msgid "By default, the result entity type is the same as the one specified at the ``from`` method. See the following code:"
msgstr "デフォルトでは、結果のエンティティタイプは ``from`` メソッドで指定されたものと同じです。次のコードを参照してください。"

#: ../../criteria-api.rst:376
msgid "To choose a joined entity type as the result entity type, call the ``select`` method as follows:"
msgstr "結合されたエンティティの型を結果のエンティティの型として選択するには、次のように ``select`` メソッドを呼び出します。"

#: ../../criteria-api.rst:400
msgid "Multiple entity selection (NativeSql)"
msgstr "複数のエンティティの検索 (NativeSql)"

#: ../../criteria-api.rst:402
msgid "You can specify multiple entity types and fetch them as a tuple as follows:"
msgstr "次のように、複数のエンティティの型を指定してタプルとしてフェッチできます。"

#: ../../criteria-api.rst:427
msgid "The entity included in the tuple may be null when the all properties of the entity are null."
msgstr "エンティティのすべてのプロパティが null の場合、タプルに含まれるエンティティは null になる可能性があります。"

#: ../../criteria-api.rst:430
msgid "Column projection (NativeSql)"
msgstr "カラムの射影 (NativeSql)"

#: ../../criteria-api.rst:432
msgid "To project columns, use the ``select`` method:"
msgstr "カラムを射影するには、 ``select`` メソッドを使用します。"

#: ../../criteria-api.rst:434
msgid "To project one column, pass one property to the select method as follows:"
msgstr "1 つのカラムを射影するには、次のように 1 つのプロパティを select メソッドに渡します。"

#: ../../criteria-api.rst:448
msgid "To project two or more columns, pass two or more properties to the select method as follows:"
msgstr "2 つ以上のカラムを射影するには、次のように 2 つ以上のプロパティを select メソッドに渡します。"

#: ../../criteria-api.rst:463
msgid "Up to 9 numbers, the column results are held by ``Tuple2`` to ``Tuple9``. For more than 9 numbers, the results are held by ``Row``."
msgstr "9 個までのカラムの結果は ``Tuple2`` から ``Tuple9`` に保持されます。 9 個を超える数値の場合、結果は ``Row`` によって保持されます。"

#: ../../criteria-api.rst:466
msgid "You can get a ``Row`` list explicitly by using ``selectAsRow`` as follows:"
msgstr "次のように ``selectAsRow`` を使用すると、 ``Row`` リストを明示的に取得できます。"

#: ../../criteria-api.rst:476
msgid "Column projection and mapping (Entityql, NativeSql)"
msgstr "カラムの射影とマッピング (Entityql、NativeSql)"

#: ../../criteria-api.rst:478
msgid "To project columns and map them to an entity, use the ``selectTo`` method as follows:"
msgstr "カラムを射影してエンティティにマップするには、次のように ``selectTo`` メソッドを使用します。"

#: ../../criteria-api.rst:492
msgid "Note that the select clause of the above SQL statement contains the primary key \"EMPLOYEE_ID\". The ``selectTo`` method always includes the id properties of the entity, even if you don't."
msgstr "上記の SQL ステートメントの SELECT 句には主キー ``EMPLOYEE_ID`` が含まれていることに注意してください。 ``selectTo`` メソッドにエンティティの id プロパティが含まれていない場合でも、SELECT 句には常に主キーが含まれます。"

#: ../../criteria-api.rst:498
msgid "Where expression (Entityql, NativeSql)"
msgstr "Where 式 (Entityql、NativeSql)"

#: ../../criteria-api.rst:500
msgid "We support the following operators and predicates:"
msgstr "次の演算子と述語がサポートされています。"

#: ../../criteria-api.rst:502
#: ../../criteria-api.rst:902
msgid "eq - (=)"
msgstr ""

#: ../../criteria-api.rst:503
#: ../../criteria-api.rst:903
msgid "ne - (<>)"
msgstr ""

#: ../../criteria-api.rst:504
#: ../../criteria-api.rst:904
msgid "ge - (>=)"
msgstr ""

#: ../../criteria-api.rst:505
#: ../../criteria-api.rst:905
msgid "gt - (>)"
msgstr ""

#: ../../criteria-api.rst:506
#: ../../criteria-api.rst:906
msgid "le - (<=)"
msgstr ""

#: ../../criteria-api.rst:507
#: ../../criteria-api.rst:907
msgid "lt - (<)"
msgstr ""

#: ../../criteria-api.rst:508
msgid "isNull - (is null)"
msgstr ""

#: ../../criteria-api.rst:509
msgid "isNotNull - (is not null)"
msgstr ""

#: ../../criteria-api.rst:510
msgid "like"
msgstr ""

#: ../../criteria-api.rst:511
msgid "notLike - (not like)"
msgstr ""

#: ../../criteria-api.rst:512
msgid "between"
msgstr ""

#: ../../criteria-api.rst:513
msgid "in"
msgstr ""

#: ../../criteria-api.rst:514
msgid "notIn - (not in)"
msgstr ""

#: ../../criteria-api.rst:515
msgid "exists"
msgstr ""

#: ../../criteria-api.rst:516
msgid "notExists - (not exists)"
msgstr ""

#: ../../criteria-api.rst:520
msgid "If the right hand operand is ``null``, the WHERE or the HAVING clause doesn't include the operator. See WhereDeclaration_ and HavingDeclaration_ javadoc for more details."
msgstr "右側のオペランドが ``null`` の場合、WHERE 句または HAVING 句には演算子が含まれません。詳細については、 WhereDeclaration_ および HavingDeclaration_ の javadoc を参照してください。"

#: ../../criteria-api.rst:526
msgid "We also support the following utility operators:"
msgstr "次のユーティリティ演算子もサポートしています。"

#: ../../criteria-api.rst:528
msgid "eqOrIsNull - (\"=\" or \"is null\")"
msgstr ""

#: ../../criteria-api.rst:529
msgid "neOrIsNotNull - (\"<>\" or \"is not null\")"
msgstr ""

#: ../../criteria-api.rst:531
#: ../../criteria-api.rst:909
msgid "We also support the following logical operators:"
msgstr "次の論理演算子もサポートしています。"

#: ../../criteria-api.rst:533
#: ../../criteria-api.rst:911
msgid "and"
msgstr ""

#: ../../criteria-api.rst:534
#: ../../criteria-api.rst:912
msgid "or"
msgstr ""

#: ../../criteria-api.rst:535
#: ../../criteria-api.rst:913
msgid "not"
msgstr ""

#: ../../criteria-api.rst:565
msgid "You can write a subquery as follows:"
msgstr "サブクエリは次のように記述できます。"

#: ../../criteria-api.rst:590
msgid "Dynamic where expression (Entityql, NativeSql)"
msgstr "動的 where 式 (Entityql、NativeSql)"

#: ../../criteria-api.rst:592
msgid "A where expression uses only evaluated operators to build a WHERE clause."
msgstr "where 式は、評価された演算子のみを使用して WHERE 句を構築します。"

#: ../../criteria-api.rst:594
msgid "When every operators are not evaluated in a where expression, the built statement doesn't have any WHERE clause."
msgstr "where 式ですべての演算子が評価されない場合、構築されたステートメントには WHERE 句が含まれません。"

#: ../../criteria-api.rst:597
#: ../../criteria-api.rst:947
msgid "As well as, when every operators are not evaluated in a logical operator expression, the built statement doesn't have the logical operator expression."
msgstr "また、すべての演算子が論理演算子の式で評価されない場合、構築されたステートメントには論理演算子の式が含まれません。"

#: ../../criteria-api.rst:600
msgid "For example, suppose that a where expression contains a conditional expression as follows:"
msgstr "たとえば、where 式に次のような条件式が含まれているとします。"

#: ../../criteria-api.rst:618
msgid "In the case that the ``enableNameCondition`` variable is ``false``, the ``like`` expression is ignored. The above query issues the following SQL statement:"
msgstr "``enableNameCondition`` 変数が ``false`` の場合、``like`` 式は無視されます。上記のクエリは次の SQL ステートメントを発行します。"

#: ../../criteria-api.rst:628
msgid "Join expression"
msgstr "Join 式"

#: ../../criteria-api.rst:630
#: ../../criteria-api.rst:1061
msgid "We support the following expressions:"
msgstr "次の式がサポートされています。"

#: ../../criteria-api.rst:632
msgid "innerJoin - (inner join)"
msgstr "innerJoin - (内部結合)"

#: ../../criteria-api.rst:633
msgid "leftJoin - (left outer join)"
msgstr "leftJoin - (左外部結合)"

#: ../../criteria-api.rst:636
msgid "innerJoin (Entityql, NativeSql)"
msgstr "innerJoin (Entityql、NativeSql)"

#: ../../criteria-api.rst:656
msgid "leftJoin (Entityql, NativeSql)"
msgstr "leftJoin (Entityql、NativeSQL)"

#: ../../criteria-api.rst:678
msgid "association (Entityql)"
msgstr "関連付け (Entityql)"

#: ../../criteria-api.rst:680
msgid "You can associate entities with the ``associate`` operation in the Entityql DSL. You have to use the ``associate`` operation with join expression."
msgstr "Entityql DSL の ``associate`` メソッドを使用してエンティティを関連付けることができます。 join 式と一緒に ``associate`` メソッドを使用する必要があります。"

#: ../../criteria-api.rst:712
msgid "You can associate many entities:"
msgstr "多くのエンティティを関連付けることができます。"

#: ../../criteria-api.rst:737
msgid "association for immutable entities (Entityql)"
msgstr "不変エンティティの関連付け (Entityql)"

#: ../../criteria-api.rst:739
msgid "You can associate immutable entities with the ``associateWith`` operation in the Entityql DSL. You have to use the ``associateWith`` operation with join expression."
msgstr "不変エンティティを Entityql DSL の ``associateWith`` メソッドに関連付けることができます。 join 式と一緒に ``associateWith`` メソッドを使用する必要があります。"

#: ../../criteria-api.rst:773
msgid "Dynamic join expression (Entityql, NativeSql)"
msgstr "動的 join 式 (Entityql、NativeSql)"

#: ../../criteria-api.rst:775
msgid "A join expression uses only evaluated operators to build a JOIN clause."
msgstr "join 式は、評価された演算子のみを使用して JOIN 句を構築します。"

#: ../../criteria-api.rst:777
msgid "When every operators are not evaluated in a join expression, the built statement doesn't have any JOIN clause."
msgstr "すべての演算子が join 式で評価されない場合、構築されたステートメントには JOIN 句は含まれません。"

#: ../../criteria-api.rst:780
msgid "For example, suppose that a join expression contains a conditional expression as follows:"
msgstr "たとえば、 join 式に条件分岐が含まれているとします。"

#: ../../criteria-api.rst:799
msgid "In the case that the ``join`` variable is ``false``, the ``on`` expression is ignored. The above query issues the following SQL statement:"
msgstr "``join`` 変数が ``false`` の場合、``on`` 式は無視されます。上記のクエリは次の SQL ステートメントを発行します。"

#: ../../criteria-api.rst:809
msgid "Dynamic association (Entityql)"
msgstr "動的関連付け (Entityql)"

#: ../../criteria-api.rst:811
msgid "When you use the above dynamic join expression, the association must be optional. To do it, pass the result of ``AssociationOption.optional()`` to the associate method:"
msgstr "上記の動的 join 式を使用する場合、関連付けはオプションである必要があります。これを行うには、 ``AssociationOption.optional()`` の結果を関連付けメソッドに渡します。"

#: ../../criteria-api.rst:840
msgid "Aggregate Functions (NativeSql)"
msgstr "集約関数 (NativeSql)"

#: ../../criteria-api.rst:842
msgid "We support the following aggregate functions:"
msgstr "次の集約関数をサポートしています。"

#: ../../criteria-api.rst:844
msgid "avg(property)"
msgstr ""

#: ../../criteria-api.rst:845
msgid "avgAsDouble(property)"
msgstr ""

#: ../../criteria-api.rst:846
msgid "count()"
msgstr ""

#: ../../criteria-api.rst:847
msgid "count(property)"
msgstr ""

#: ../../criteria-api.rst:848
msgid "countDistinct(property)"
msgstr ""

#: ../../criteria-api.rst:849
msgid "max(property)"
msgstr ""

#: ../../criteria-api.rst:850
msgid "min(property)"
msgstr ""

#: ../../criteria-api.rst:851
msgid "sum(property)"
msgstr ""

#: ../../criteria-api.rst:853
msgid "These are defined in the ``org.seasar.doma.jdbc.criteria.expression.Expressions`` class. Use them with static import."
msgstr "これらは ``org.seasar.doma.jdbc.criteria.expression.Expressions`` クラスで定義されています。静的インポートで使用します。"

#: ../../criteria-api.rst:856
msgid "For example, you can pass the ``sum`` function to the select method:"
msgstr "たとえば、 ``sum`` 関数を select メソッドに渡すことができます。"

#: ../../criteria-api.rst:871
msgid "Group by expression (NativeSql)"
msgstr "Group by 式 (NativeSql)"

#: ../../criteria-api.rst:886
msgid "When you don't specify a group by expression, the expression is inferred from the select expression automatically. So the following code issue the same SQL statement above:"
msgstr "group by 式を指定しない場合、group by 式は select 式から自動的に推測されます。したがって、次のコードは上記と同じ SQL ステートメントを発行します。"

#: ../../criteria-api.rst:898
msgid "Having expression (NativeSql)"
msgstr "Having 式(NativeSql)"

#: ../../criteria-api.rst:900
msgid "We support the following operators:"
msgstr "次の演算子をサポートしています。"

#: ../../criteria-api.rst:940
msgid "Dynamic having expression (NativeSql)"
msgstr "動的 Having 式 (NativeSql)"

#: ../../criteria-api.rst:942
msgid "A having expression uses only evaluated operators to build a HAVING clause."
msgstr "having 式では、評価された演算子のみを使用して HAVING 句を構築します。"

#: ../../criteria-api.rst:944
msgid "When every operators are not evaluated in a having expression, the built statement doesn't have any HAVING clause."
msgstr "having 式ですべての演算子が評価されない場合、構築されたステートメントには HAVING 句は含まれません。"

#: ../../criteria-api.rst:951
msgid "Order by expression (Entityql, NativeSql)"
msgstr "Order by 式 (Entityql、NativeSql)"

#: ../../criteria-api.rst:953
msgid "We support the following order operations:"
msgstr "次のソート操作をサポートしています。"

#: ../../criteria-api.rst:955
msgid "asc"
msgstr ""

#: ../../criteria-api.rst:956
msgid "desc"
msgstr "\n"

#: ../../criteria-api.rst:982
msgid "Dynamic order by expression (NativeSql)"
msgstr "動的 Order by 式 (NativeSql)"

#: ../../criteria-api.rst:984
msgid "An order by expression uses only evaluated operators to build an ORDER BY clause."
msgstr "order by 式では、評価された演算子のみを使用して ORDER BY 句を作成します。"

#: ../../criteria-api.rst:986
msgid "When every operators are not evaluated in a order by expression, the built statement doesn't have any ORDER BY clause."
msgstr "すべての演算子が order by 式で評価されない場合、構築されたステートメントには ORDER BY 句は含まれません。"

#: ../../criteria-api.rst:990
msgid "Distinct expression (Entityql, NativeSql)"
msgstr "Distinct 式 (Entityql、NativeSql)"

#: ../../criteria-api.rst:1011
msgid "Limit and Offset expression (Entityql, NativeSql)"
msgstr "Limit および offset 式 (Entityql、NativeSql)"

#: ../../criteria-api.rst:1031
msgid "Dynamic Limit and Offset expression (Entityql, NativeSql)"
msgstr "動的な limit および offset 式 (Entityql、NativeSql)"

#: ../../criteria-api.rst:1033
msgid "A limit expressions uses only non-null value to build a FETCH FIRST clause. When the value is null ,the built statement doesn't have any FETCH FIRST clause."
msgstr "limit 式では、null 以外の値のみを使用して FETCH FIRST 句を構築します。値が null の場合、構築されたステートメントには FETCH FIRST 句がありません。"

#: ../../criteria-api.rst:1036
msgid "As well as, an offset expressions uses only non-null value to build a OFFSET clause. When the value is null ,the built statement doesn't have any OFFSET clause."
msgstr "また、offset 式では、OFFSET 句を構築するために null 以外の値のみが使用されます。値が null の場合、構築されたステートメントには OFFSET 句がありません。"

#: ../../criteria-api.rst:1040
msgid "For Update expression (Entityql, NativeSql)"
msgstr " For update 式 (Entityql、NativeSql)"

#: ../../criteria-api.rst:1059
msgid "Union expression (NativeSql)"
msgstr "Union 式（NativeSql）"

#: ../../criteria-api.rst:1063
msgid "union"
msgstr ""

#: ../../criteria-api.rst:1064
msgid "unionAll - (union all)"
msgstr ""

#: ../../criteria-api.rst:1087
msgid "The order by expression with index is supported:"
msgstr "インデックスを使用した式による順序付けがサポートされています。"

#: ../../criteria-api.rst:1104
msgid "Derived Table expression (Entityql, NativeSql)"
msgstr "派生テーブル式 (Entityql、NativeSql)"

#: ../../criteria-api.rst:1106
msgid "We support subqueries using derived tables. However, an entity class corresponding to the derived table is required."
msgstr "派生テーブルを使用したサブクエリをサポートします。ただし、派生テーブルに対応するエンティティクラスが必要です。"

#: ../../criteria-api.rst:1109
msgid "Define the entity class corresponding to the derived table as follows:"
msgstr "派生テーブルに対応するエンティティ クラスを次のように定義します。"

#: ../../criteria-api.rst:1156
msgid "A subquery using a derived table can be written as follows."
msgstr "派生テーブルを使用したサブクエリは次のように記述できます。"

#: ../../criteria-api.rst:1197
msgid "Delete statement"
msgstr "Delete ステートメント"

#: ../../criteria-api.rst:1199
msgid "For the specification of the where expression, see :ref:`criteria_where`. The same rule is applied to delete statements."
msgstr "where 式の仕様については、:ref:`criteria_where` を参照してください。同じルールがステートメントの削除にも適用されます。"

#: ../../criteria-api.rst:1203
msgid "Delete settings (Entityql, NativeSql)"
msgstr "Delete 設定（Entityql、NativeSql）"

#: ../../criteria-api.rst:1208
#: ../../criteria-api.rst:1296
#: ../../criteria-api.rst:1527
msgid "batchSize"
msgstr ""

#: ../../criteria-api.rst:1210
#: ../../criteria-api.rst:1529
msgid "ignoreVersion"
msgstr "ignoreVersion"

#: ../../criteria-api.rst:1213
#: ../../criteria-api.rst:1532
msgid "suppressOptimisticLockException"
msgstr "suppressOptimisticLockException"

#: ../../criteria-api.rst:1215
#: ../../criteria-api.rst:1302
#: ../../criteria-api.rst:1537
msgid "They are all optional."
msgstr "これらはすべてオプションです。"

#: ../../criteria-api.rst:1217
#: ../../criteria-api.rst:1304
#: ../../criteria-api.rst:1539
msgid "You can apply them as follows:"
msgstr "それらは次のように適用できます。"

#: ../../criteria-api.rst:1235
msgid "If you want to build a delete statement without a WHERE clause, you have to enable the `allowEmptyWhere` setting."
msgstr "WHERE 句のない削除ステートメントを構築したい場合は、`allowEmptyWhere` 設定を有効にする必要があります。"

#: ../../criteria-api.rst:1239
msgid "Delete statement (Entityql)"
msgstr "Delete ステートメント (Entityql)"

#: ../../criteria-api.rst:1255
msgid "Batch Delete is also supported:"
msgstr "バッチ削除もサポートされています。"

#: ../../criteria-api.rst:1266
#: ../../criteria-api.rst:1412
#: ../../criteria-api.rst:1443
#: ../../criteria-api.rst:1605
#: ../../criteria-api.rst:1635
msgid "The execute method may throw following exceptions:"
msgstr "実行メソッドは次の例外をスローする場合があります。"

#: ../../criteria-api.rst:1268
#: ../../criteria-api.rst:1607
msgid "OptimisticLockException: if the entity has a version property and an update count is 0"
msgstr "OptimisticLockException: エンティティにバージョン プロパティがあり、更新件数が 0 の場合"

#: ../../criteria-api.rst:1271
msgid "Delete statement (NativeSql)"
msgstr "Delete ステートメント (NativeSql)"

#: ../../criteria-api.rst:1286
msgid "Insert statement"
msgstr "Insert ステートメント"

#: ../../criteria-api.rst:1289
msgid "Insert settings (Entityql, NativeSql)"
msgstr "Insert 設定 (Entityql、NativeSql)"

#: ../../criteria-api.rst:1297
#: ../../criteria-api.rst:1533
msgid "excludeNull"
msgstr ""

#: ../../criteria-api.rst:1298
#: ../../criteria-api.rst:1534
msgid "include"
msgstr ""

#: ../../criteria-api.rst:1299
#: ../../criteria-api.rst:1535
msgid "exclude"
msgstr ""

#: ../../criteria-api.rst:1300
msgid "ignoreGeneratedKeys"
msgstr ""

#: ../../criteria-api.rst:1340
msgid "Insert statement (Entityql)"
msgstr "Insert ステートメント (Entityql)"

#: ../../criteria-api.rst:1361
msgid "Batch Insert is also supported:"
msgstr "バッチ追加もサポートされています。"

#: ../../criteria-api.rst:1373
msgid "Multi-row Insert is also supported:"
msgstr "複数行追加もサポートされています。"

#: ../../criteria-api.rst:1392
#: ../../criteria-api.rst:1468
msgid "Upsert is also supported:"
msgstr "Upsertもサポートされています"

#: ../../criteria-api.rst:1394
msgid "By calling on `onDuplicateKeyUpdate`, you can update when a key is duplicated."
msgstr "`onDuplicateKeyUpdate` を呼び出すことで、キーが重複した場合に更新することができます。"

#: ../../criteria-api.rst:1403
msgid "By calling on `onDuplicateKeyIgnore`, you can ignore errors when a key is duplicated."
msgstr "`onDuplicateKeyIgnore` を呼び出すことで、キーが重複した場合のエラーを無視することができます。"

#: ../../criteria-api.rst:1414
#: ../../criteria-api.rst:1445
#: ../../criteria-api.rst:1608
#: ../../criteria-api.rst:1637
msgid "UniqueConstraintException: if an unique constraint is violated"
msgstr "UniqueConstraintException: 一意制約に違反した場合"

#: ../../criteria-api.rst:1417
msgid "Insert statement (NativeSql)"
msgstr "Insert ステートメント (NativeSql)"

#: ../../criteria-api.rst:1447
msgid "We also support the INSERT SELECT syntax as follows:"
msgstr "次のような INSERT SELECT 構文もサポートされています。"

#: ../../criteria-api.rst:1470
msgid "By calling on `onDuplicateKeyUpdate`, you can update when a key is duplicated. You can specify keys for duplicate check targets in `keys`. You can specify the value of the update in case of duplicates in `set`."
msgstr "`onDuplicateKeyUpdate` を呼び出すことで、キーが重複したときに更新することができます。 `keys` で重複チェック対象のキーを指定できます。`set` で重複した場合の更新の値を指定できます。"

#: ../../criteria-api.rst:1496
msgid "By calling on `onDuplicateKeyIgnore`, you can ignore errors when a key is duplicated. You can specify keys for duplicate check targets in `keys`."
msgstr "`onDuplicateKeyIgnore` を呼び出すことで、キーが重複したときのエラーを無視することができます。 `keys` で重複チェック対象のキーを指定できます。"

#: ../../criteria-api.rst:1516
msgid "Update statement"
msgstr "Update ステートメント"

#: ../../criteria-api.rst:1518
msgid "For the specification of the where expression, see :ref:`criteria_where`. The same rule is applied to update statements."
msgstr "where 式の仕様については、:ref:`criteria_where` を参照してください。同じルールが更新ステートメントにも適用されます。"

#: ../../criteria-api.rst:1522
msgid "Update settings (Entityql, NativeSql)"
msgstr "Update 設定 (Entityql、NativeSql)"

#: ../../criteria-api.rst:1570
msgid "If you want to build a update statement without a WHERE clause, you have to enable the `allowEmptyWhere` setting."
msgstr "WHERE 句のない update ステートメントを構築したい場合は、`allowEmptyWhere` 設定を有効にする必要があります。"

#: ../../criteria-api.rst:1574
msgid "Update statement (Entityql)"
msgstr "Update ステートメント (Entityql)"

#: ../../criteria-api.rst:1593
msgid "Batch Update is also supported:"
msgstr "バッチ更新もサポートされています。"

#: ../../criteria-api.rst:1611
msgid "Update statement (NativeSql)"
msgstr "Update ステートメント (NativeSql)"

#: ../../criteria-api.rst:1640
msgid "Property expressions (Entityql, NativeSql)"
msgstr "プロパティ式 (Entityql、NativeSql)"

#: ../../criteria-api.rst:1642
msgid "All expression methods are defined in the ``org.seasar.doma.jdbc.criteria.expression.Expressions`` class."
msgstr "すべての式メソッドは ``org.seasar.doma.jdbc.criteria.expression.Expressions`` クラスで定義されています。"

#: ../../criteria-api.rst:1645
msgid "Use them with static import."
msgstr "静的インポートで使用します。"

#: ../../criteria-api.rst:1648
msgid "Arithmetic expressions"
msgstr "算術式"

#: ../../criteria-api.rst:1650
msgid "We provide the following methods:"
msgstr "次の方法を提供します。"

#: ../../criteria-api.rst:1652
msgid "add - (+)"
msgstr ""

#: ../../criteria-api.rst:1653
msgid "sub - (-)"
msgstr ""

#: ../../criteria-api.rst:1654
msgid "mul - (*)"
msgstr ""

#: ../../criteria-api.rst:1655
msgid "div - (/)"
msgstr ""

#: ../../criteria-api.rst:1656
msgid "mod - (%)"
msgstr ""

#: ../../criteria-api.rst:1658
msgid "You can use the ``add`` method as follows:"
msgstr "次のように ``add`` メソッドを使用できます。"

#: ../../criteria-api.rst:1680
msgid "String functions"
msgstr "文字列関数"

#: ../../criteria-api.rst:1682
#: ../../criteria-api.rst:1715
msgid "We provide the following method:"
msgstr "以下の方法を提供します。"

#: ../../criteria-api.rst:1684
msgid "concat"
msgstr ""

#: ../../criteria-api.rst:1685
msgid "lower"
msgstr ""

#: ../../criteria-api.rst:1686
msgid "upper"
msgstr ""

#: ../../criteria-api.rst:1687
msgid "trim"
msgstr ""

#: ../../criteria-api.rst:1688
msgid "ltrim"
msgstr ""

#: ../../criteria-api.rst:1689
msgid "rtrim"
msgstr ""

#: ../../criteria-api.rst:1691
msgid "You can use the ``concat`` method as follows:"
msgstr "次のように ``concat`` メソッドを使用できます。"

#: ../../criteria-api.rst:1713
msgid "Literal expression"
msgstr "リテラル表現"

#: ../../criteria-api.rst:1717
msgid "literal (for all basic data types)"
msgstr ""

#: ../../criteria-api.rst:1719
msgid "You can use the ``literal`` method as follows:"
msgstr "次のように ``literal`` メソッドを使用できます。"

#: ../../criteria-api.rst:1736
msgid "Note that the literal expressions are not recognized as bind variables."
msgstr "リテラル式はバインド変数として認識されないことに注意してください。"

#: ../../criteria-api.rst:1739
msgid "Case expression"
msgstr "Case 式"

#: ../../criteria-api.rst:1741
#: ../../criteria-api.rst:1776
msgid "We support the following method:"
msgstr "次の方法をサポートしています。"

#: ../../criteria-api.rst:1743
msgid "when"
msgstr ""

#: ../../criteria-api.rst:1745
msgid "You can use the ``when`` method as follows:"
msgstr "次のように ``when`` メソッドを使用できます。"

#: ../../criteria-api.rst:1774
msgid "Subquery select expression"
msgstr "サブクエリ select 式"

#: ../../criteria-api.rst:1778
msgid "select"
msgstr ""

#: ../../criteria-api.rst:1780
msgid "You can use the ``select`` method as follows:"
msgstr "次のように ``select`` メソッドを使用できます。"

#: ../../criteria-api.rst:1820
msgid "User-defined expressions"
msgstr "ユーザー定義式"

#: ../../criteria-api.rst:1822
msgid "You can define user-defined expressions by calling ``Expressions.userDefined``."
msgstr "``Expressions.userDefined`` を呼び出すことで、ユーザー定義の式を定義できます。"

#: ../../criteria-api.rst:1824
msgid "In the example below, the replace function is defined:"
msgstr "以下の例では、replace 関数が定義されています。"

#: ../../criteria-api.rst:1840
msgid "You can use the replace function in your query as follows:"
msgstr "クエリで replace 関数を使用するには、次のようにします。"

#: ../../criteria-api.rst:1857
msgid "Scopes (Entityql, NativeSql)"
msgstr "スコープ (Entityql、NativeSQL)"

#: ../../criteria-api.rst:1859
msgid "Scoping allow you to specify commonly-used query conditions."
msgstr "スコープを使用すると、一般的に使用されるクエリ条件を指定できます。"

#: ../../criteria-api.rst:1861
msgid "To define a simple scope, create the class which has a method annotated with ``@Scope``:"
msgstr "単純なスコープを定義するには、 ``@Scope`` アノテーションが付けられたメソッドを持つクラスを作成します。"

#: ../../criteria-api.rst:1873
msgid "To enable the scope, specify the above class in the scopes element of ``@Metamodel``:"
msgstr "スコープを有効にするには、 ``@Metamodel`` のscopes 要素に上記のクラスを指定します。"

#: ../../criteria-api.rst:1881
msgid "Now the metamodel ``Department_`` has a ``onlyTokyo`` method. You can use it as follows:"
msgstr "上述の設定によりメタモデル ``Department_`` には ``onlyTokyo`` メソッドが生成されます。次のように使用できます。"

#: ../../criteria-api.rst:1897
msgid "When you want to combine other query conditions with scopes, compose them using the `andThen` method:"
msgstr "他のクエリ条件をスコープと組み合わせたい場合は、 `andThen` メソッドを使用して条件を作成します。"

#: ../../criteria-api.rst:1906
msgid "You can define several scopes in a class as follows:"
msgstr "次のように、クラス内に複数のスコープを定義できます。"

#: ../../criteria-api.rst:1928
msgid "Tips"
msgstr "ちょっとした便利機能"

#: ../../criteria-api.rst:1931
msgid "Execution in Dao (Entityql, NativeSql)"
msgstr "DAOでの実行（Entityql、NativeSql）"

#: ../../criteria-api.rst:1933
msgid "It is useful to execute DSLs in the default method of the Dao interface. To get a ``config`` object, call ``Config.get(this)`` in the default method as follows:"
msgstr "DAO インターフェースのデフォルトのメソッドで DSL を実行すると便利です。 ``config`` オブジェクトを取得するには、次のようにデフォルトのメソッドで ``Config.get(this)`` を呼び出します。"

#: ../../criteria-api.rst:1950
msgid "Overwriting the table name (Entityql, NativeSql)"
msgstr "テーブル名の上書き（Entityql、NativeSql）"

#: ../../criteria-api.rst:1952
msgid "A metamodel constructor accepts the qualified table name and the metamodel overwrites its table name."
msgstr "メタモデル コンストラクターは修飾されたテーブル名を受け入れ、メタモデルはそのテーブル名を上書きします。"

#: ../../criteria-api.rst:1955
msgid "It is useful to handle two tables that have the same data structure:"
msgstr "同じデータ構造を持つ 2 つのテーブルを処理すると便利です。"

#: ../../criteria-api.rst:1975
msgid "Debugging (Entityql, NativeSql)"
msgstr "デバッグ (Entityql、NativeSql)"

#: ../../criteria-api.rst:1977
msgid "To know the SQL statement built by the DSLs, use the ``asSql`` method:"
msgstr "DSL によって構築された SQL ステートメントを知るには、 ``asSql`` メソッドを使用します。"

#: ../../criteria-api.rst:1989
#: ../../criteria-api.rst:2016
msgid "The above code prints as follows:"
msgstr "上記のコードは次のように出力されます。"

#: ../../criteria-api.rst:1996
msgid "The ``asSql`` method doesn't issue the SQL statement to your Database. It only builds the SQL statement and return it as an ``Sql`` object."
msgstr "``asSql`` メソッドはデータベースに SQL ステートメントを発行しません。 SQL ステートメントを構築し、それを ``Sql`` オブジェクトとして返すだけです。"

#: ../../criteria-api.rst:1999
msgid "You can also get the ``Sql`` object by calling the ``peek`` method."
msgstr "``peek`` メソッドを呼び出して ``Sql`` オブジェクトを取得することもできます。"

#: ../../criteria-api.rst:2026
msgid "Sample projects"
msgstr "サンプルプロジェクト"

#: ../../criteria-api.rst:2028
msgid "`simple-examples <https://github.com/domaframework/simple-examples>`_"
msgstr ""

#: ../../criteria-api.rst:2029
msgid "`kotlin-sample <https://github.com/domaframework/kotlin-sample>`_"
msgstr ""

