# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Toshihiro Nakamura
# This file is distributed under the same license as the Doma package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Doma\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-10 00:27+0900\n"
"PO-Revision-Date: 2024-03-09 16:18+0000\n"
"Language-Team: Japanese (https://app.transifex.com/domaframework/teams/189259/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../criteria-api.rst:3
msgid "Criteria API"
msgstr ""

#: ../../criteria-api.rst:6
msgid "Contents"
msgstr ""

#: ../../criteria-api.rst:9
msgid "Introduction"
msgstr ""

#: ../../criteria-api.rst:13
msgid ""
"In Kotlin environment, use Kotlin specific DSLs instead of the following "
"DSLs. See :ref:`kotlin-specific-criteria-api`."
msgstr ""

#: ../../criteria-api.rst:16
msgid "There are two kinds of DSLs in the Criteria API:"
msgstr ""

#: ../../criteria-api.rst:18
msgid "The Entityql DSL"
msgstr ""

#: ../../criteria-api.rst:19
msgid "The NativeSql DSL"
msgstr ""

#: ../../criteria-api.rst:21
msgid "Both requires predefined Entity classes and metamodel classes."
msgstr ""

#: ../../criteria-api.rst:23
msgid "We use the following Entity classes to show you some examples:"
msgstr ""

#: ../../criteria-api.rst:99
msgid ""
"Note that the above classes are annotated with ``@Entity(metamodel = "
"@Metamodel)``. The ``metamodel = @Metamodel`` indicates that the annotated "
"entity has a corresponding metamodel class generated by Doma's annotation "
"processor ."
msgstr ""

#: ../../criteria-api.rst:103
msgid ""
"In our examples, the metamodel classes are ``Employee_``, ``Department_``, "
"``Emp_`` and ``Dept_``. These metamodels allow you to make your query "
"typesafe."
msgstr ""

#: ../../criteria-api.rst:106
msgid ""
"You can customize the name of the metamodels by the Metamodel annotation "
"elements."
msgstr ""

#: ../../criteria-api.rst:108
msgid ""
"To customize all metamodels in bulk, you can use the annotation processor "
"options. See :doc:`annotation-processing` and check the following options:"
msgstr ""

#: ../../criteria-api.rst:111
msgid "doma.metamodel.enabled"
msgstr ""

#: ../../criteria-api.rst:112
msgid "doma.metamodel.prefix"
msgstr ""

#: ../../criteria-api.rst:113
msgid "doma.metamodel.suffix"
msgstr ""

#: ../../criteria-api.rst:116
msgid "Entityql DSL"
msgstr ""

#: ../../criteria-api.rst:118
msgid ""
"The Entityql DSL can query and associate entities. The entry point is the "
"``org.seasar.doma.jdbc.criteria.Entityql`` class. This class has the "
"following methods:"
msgstr ""

#: ../../criteria-api.rst:122 ../../criteria-api.rst:173
msgid "from"
msgstr ""

#: ../../criteria-api.rst:123 ../../criteria-api.rst:175
msgid "insert"
msgstr ""

#: ../../criteria-api.rst:124 ../../criteria-api.rst:174
msgid "delete"
msgstr ""

#: ../../criteria-api.rst:125 ../../criteria-api.rst:176
msgid "update"
msgstr ""

#: ../../criteria-api.rst:127
msgid "You can instantiate the ``Entityql`` class as follows:"
msgstr ""

#: ../../criteria-api.rst:133
msgid ""
"For example, to query ``Employee`` and ``Department`` entities and associate"
" them, write as follows:"
msgstr ""

#: ../../criteria-api.rst:154 ../../criteria-api.rst:201
#: ../../criteria-api.rst:358 ../../criteria-api.rst:382
#: ../../criteria-api.rst:408 ../../criteria-api.rst:433
#: ../../criteria-api.rst:448 ../../criteria-api.rst:477
#: ../../criteria-api.rst:547 ../../criteria-api.rst:570
#: ../../criteria-api.rst:637 ../../criteria-api.rst:657
#: ../../criteria-api.rst:693 ../../criteria-api.rst:749
#: ../../criteria-api.rst:855 ../../criteria-api.rst:871
#: ../../criteria-api.rst:920 ../../criteria-api.rst:963
#: ../../criteria-api.rst:992 ../../criteria-api.rst:1011
#: ../../criteria-api.rst:1039 ../../criteria-api.rst:1070
#: ../../criteria-api.rst:1165 ../../criteria-api.rst:1240
#: ../../criteria-api.rst:1270 ../../criteria-api.rst:1345
#: ../../criteria-api.rst:1388 ../../criteria-api.rst:1412
#: ../../criteria-api.rst:1491 ../../criteria-api.rst:1533
#: ../../criteria-api.rst:1576 ../../criteria-api.rst:1609
#: ../../criteria-api.rst:1630 ../../criteria-api.rst:1668
#: ../../criteria-api.rst:1711 ../../criteria-api.rst:1758
msgid "The above query issues the following SQL statement:"
msgstr ""

#: ../../criteria-api.rst:165
msgid "NativeSql DSL"
msgstr ""

#: ../../criteria-api.rst:167
msgid ""
"The NativeSql DSL can issue more complex SQL statements rather than the "
"Entityql DSL. But note that the NativeSql DSL doesn't support to associate "
"entities."
msgstr ""

#: ../../criteria-api.rst:170
msgid ""
"The entry point is the ``org.seasar.doma.jdbc.criteria.NativeSql`` class. "
"This class has the following methods:"
msgstr ""

#: ../../criteria-api.rst:178
msgid "You can instantiate the ``NativeSql`` class as follows:"
msgstr ""

#: ../../criteria-api.rst:184
msgid ""
"For example, to query two columns with GROUP BY and HAVING clauses, write as"
" follows:"
msgstr ""

#: ../../criteria-api.rst:212
msgid "The difference between two DSLs"
msgstr ""

#: ../../criteria-api.rst:214
msgid ""
"The biggest difference between two DSLs is that the Entityql DSL removes "
"duplicated data from the fetched results, but the NativeSQL DSL doesn't."
msgstr ""

#: ../../criteria-api.rst:217
msgid "See the following example:"
msgstr ""

#: ../../criteria-api.rst:235
msgid "Both (1) and (2) issue the same SQL statement as follows:"
msgstr ""

#: ../../criteria-api.rst:243
msgid ""
"The ResultSet contains 14 rows, but the Entityql DSL returns only 3 rows "
"because it removes duplicate Department entities. The Entityql DSL uses the "
"id properties to know the uniqueness of the entities."
msgstr ""

#: ../../criteria-api.rst:247
msgid ""
"On the other hand, the NativeSql DSL returns the data as it retrieves from "
"the database. It puts results into entity objects, but it handles them as "
"the plain DTOs."
msgstr ""

#: ../../criteria-api.rst:251
msgid "Select statement"
msgstr ""

#: ../../criteria-api.rst:254
msgid "Select settings (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:256 ../../criteria-api.rst:1196
#: ../../criteria-api.rst:1282 ../../criteria-api.rst:1429
msgid "We support the following settings:"
msgstr ""

#: ../../criteria-api.rst:258 ../../criteria-api.rst:1198
#: ../../criteria-api.rst:1431
msgid "allowEmptyWhere"
msgstr ""

#: ../../criteria-api.rst:259 ../../criteria-api.rst:1200
#: ../../criteria-api.rst:1284 ../../criteria-api.rst:1433
msgid "comment"
msgstr ""

#: ../../criteria-api.rst:260
msgid "fetchSize"
msgstr ""

#: ../../criteria-api.rst:261
msgid "maxRows"
msgstr ""

#: ../../criteria-api.rst:262 ../../criteria-api.rst:1202
#: ../../criteria-api.rst:1285 ../../criteria-api.rst:1435
msgid "queryTimeout"
msgstr ""

#: ../../criteria-api.rst:263 ../../criteria-api.rst:1203
#: ../../criteria-api.rst:1286 ../../criteria-api.rst:1436
msgid "sqlLogType"
msgstr ""

#: ../../criteria-api.rst:265
msgid "They are all optional. You can apply them as follows:"
msgstr ""

#: ../../criteria-api.rst:282
msgid "Fetching (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:284
msgid ""
"Both Entityql DSL and NativeSql DSL support the following methods to fetch "
"data from a database:"
msgstr ""

#: ../../criteria-api.rst:286
msgid "fetch"
msgstr ""

#: ../../criteria-api.rst:287
msgid "fetchOne"
msgstr ""

#: ../../criteria-api.rst:288
msgid "fetchOptional"
msgstr ""

#: ../../criteria-api.rst:289
msgid "stream"
msgstr ""

#: ../../criteria-api.rst:313
msgid "Streaming (NativeSql)"
msgstr ""

#: ../../criteria-api.rst:315
msgid "The NativeSql DSL supports the following methods:"
msgstr ""

#: ../../criteria-api.rst:317
msgid "mapStream"
msgstr ""

#: ../../criteria-api.rst:318
msgid "collect"
msgstr ""

#: ../../criteria-api.rst:335
msgid ""
"These methods handle the stream that wraps a JDBC ResultSet. So they are "
"useful to process a large ResultSet effectively."
msgstr ""

#: ../../criteria-api.rst:339
msgid "Select expression"
msgstr ""

#: ../../criteria-api.rst:342
msgid "Entity selection (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:344
msgid ""
"By default, the result entity type is the same as the one specified at the "
"``from`` method. See the following code:"
msgstr ""

#: ../../criteria-api.rst:367
msgid ""
"To choose a joined entity type as the result entity type, call the "
"``select`` method as follows:"
msgstr ""

#: ../../criteria-api.rst:391
msgid "Multiple entity selection (NativeSql)"
msgstr ""

#: ../../criteria-api.rst:393
msgid ""
"You can specify multiple entity types and fetch them as a tuple as follows:"
msgstr ""

#: ../../criteria-api.rst:418
msgid ""
"The entity included in the tuple may be null when the all properties of the "
"entity are null."
msgstr ""

#: ../../criteria-api.rst:421
msgid "Column projection (NativeSql)"
msgstr ""

#: ../../criteria-api.rst:423
msgid "To project columns, use the ``select`` method:"
msgstr ""

#: ../../criteria-api.rst:425
msgid ""
"To project one column, pass one property to the select method as follows:"
msgstr ""

#: ../../criteria-api.rst:439
msgid ""
"To project two or more columns, pass two or more properties to the select "
"method as follows:"
msgstr ""

#: ../../criteria-api.rst:454
msgid ""
"Up to 9 numbers, the column results are held by ``Tuple2`` to ``Tuple9``. "
"For more than 9 numbers, the results are held by ``Row``."
msgstr ""

#: ../../criteria-api.rst:457
msgid ""
"You can get a ``Row`` list explicitly by using ``selectAsRow`` as follows:"
msgstr ""

#: ../../criteria-api.rst:467
msgid "Column projection and mapping (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:469
msgid ""
"To project columns and map them to an entity, use the ``selectTo`` method as"
" follows:"
msgstr ""

#: ../../criteria-api.rst:483
msgid ""
"Note that the select clause of the above SQL statement contains the primary "
"key \"EMPLOYEE_ID\". The ``selectTo`` method always includes the id "
"properties of the entity, even if you don't."
msgstr ""

#: ../../criteria-api.rst:489
msgid "Where expression (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:491
msgid "We support the following operators and predicates:"
msgstr ""

#: ../../criteria-api.rst:493 ../../criteria-api.rst:893
msgid "eq - (=)"
msgstr ""

#: ../../criteria-api.rst:494 ../../criteria-api.rst:894
msgid "ne - (<>)"
msgstr ""

#: ../../criteria-api.rst:495 ../../criteria-api.rst:895
msgid "ge - (>=)"
msgstr ""

#: ../../criteria-api.rst:496 ../../criteria-api.rst:896
msgid "gt - (>)"
msgstr ""

#: ../../criteria-api.rst:497 ../../criteria-api.rst:897
msgid "le - (<=)"
msgstr ""

#: ../../criteria-api.rst:498 ../../criteria-api.rst:898
msgid "lt - (<)"
msgstr ""

#: ../../criteria-api.rst:499
msgid "isNull - (is null)"
msgstr ""

#: ../../criteria-api.rst:500
msgid "isNotNull - (is not null)"
msgstr ""

#: ../../criteria-api.rst:501
msgid "like"
msgstr ""

#: ../../criteria-api.rst:502
msgid "notLike - (not like)"
msgstr ""

#: ../../criteria-api.rst:503
msgid "between"
msgstr ""

#: ../../criteria-api.rst:504
msgid "in"
msgstr ""

#: ../../criteria-api.rst:505
msgid "notIn - (not in)"
msgstr ""

#: ../../criteria-api.rst:506
msgid "exists"
msgstr ""

#: ../../criteria-api.rst:507
msgid "notExists - (not exists)"
msgstr ""

#: ../../criteria-api.rst:511
msgid ""
"If the right hand operand is ``null``, the WHERE or the HAVING clause "
"doesn't include the operator. See WhereDeclaration_ and HavingDeclaration_ "
"javadoc for more details."
msgstr ""

#: ../../criteria-api.rst:517
msgid "We also support the following utility operators:"
msgstr ""

#: ../../criteria-api.rst:519
msgid "eqOrIsNull - (\"=\" or \"is null\")"
msgstr ""

#: ../../criteria-api.rst:520
msgid "neOrIsNotNull - (\"<>\" or \"is not null\")"
msgstr ""

#: ../../criteria-api.rst:522 ../../criteria-api.rst:900
msgid "We also support the following logical operators:"
msgstr ""

#: ../../criteria-api.rst:524 ../../criteria-api.rst:902
msgid "and"
msgstr ""

#: ../../criteria-api.rst:525 ../../criteria-api.rst:903
msgid "or"
msgstr ""

#: ../../criteria-api.rst:526 ../../criteria-api.rst:904
msgid "not"
msgstr ""

#: ../../criteria-api.rst:556
msgid "You can write a subquery as follows:"
msgstr ""

#: ../../criteria-api.rst:581
msgid "Dynamic where expression (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:583
msgid ""
"A where expression uses only evaluated operators to build a WHERE clause."
msgstr ""

#: ../../criteria-api.rst:585
msgid ""
"When every operators are not evaluated in a where expression, the built "
"statement doesn't have any WHERE clause."
msgstr ""

#: ../../criteria-api.rst:588 ../../criteria-api.rst:938
msgid ""
"As well as, when every operators are not evaluated in a logical operator "
"expression, the built statement doesn't have the logical operator "
"expression."
msgstr ""

#: ../../criteria-api.rst:591
msgid ""
"For example, suppose that a where expression contains a conditional "
"expression as follows:"
msgstr ""

#: ../../criteria-api.rst:609
msgid ""
"In the case that the ``enableNameCondition`` variable is ``false``, the "
"``like`` expression is ignored. The above query issues the following SQL "
"statement:"
msgstr ""

#: ../../criteria-api.rst:619
msgid "Join expression"
msgstr ""

#: ../../criteria-api.rst:621 ../../criteria-api.rst:1052
msgid "We support the following expressions:"
msgstr ""

#: ../../criteria-api.rst:623
msgid "innerJoin - (inner join)"
msgstr ""

#: ../../criteria-api.rst:624
msgid "leftJoin - (left outer join)"
msgstr ""

#: ../../criteria-api.rst:627
msgid "innerJoin (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:647
msgid "leftJoin (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:669
msgid "association (Entityql)"
msgstr ""

#: ../../criteria-api.rst:671
msgid ""
"You can associate entities with the ``associate`` operation in the Entityql "
"DSL. You have to use the ``associate`` operation with join expression."
msgstr ""

#: ../../criteria-api.rst:703
msgid "You can associate many entities:"
msgstr ""

#: ../../criteria-api.rst:728
msgid "association for immutable entities (Entityql)"
msgstr ""

#: ../../criteria-api.rst:730
msgid ""
"You can associate immutable entities with the ``associateWith`` operation in"
" the Entityql DSL. You have to use the ``associateWith`` operation with join"
" expression."
msgstr ""

#: ../../criteria-api.rst:764
msgid "Dynamic join expression (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:766
msgid ""
"A join expression uses only evaluated operators to build a JOIN clause."
msgstr ""

#: ../../criteria-api.rst:768
msgid ""
"When every operators are not evaluated in a join expression, the built "
"statement doesn't have any JOIN clause."
msgstr ""

#: ../../criteria-api.rst:771
msgid ""
"For example, suppose that a join expression contains a conditional "
"expression as follows:"
msgstr ""

#: ../../criteria-api.rst:790
msgid ""
"In the case that the ``join`` variable is ``false``, the ``on`` expression "
"is ignored. The above query issues the following SQL statement:"
msgstr ""

#: ../../criteria-api.rst:800
msgid "Dynamic association (Entityql)"
msgstr ""

#: ../../criteria-api.rst:802
msgid ""
"When you use the above dynamic join expression, the association must be "
"optional. To do it, pass the result of ``AssociationOption.optional()`` to "
"the associate method:"
msgstr ""

#: ../../criteria-api.rst:831
msgid "Aggregate Functions (NativeSql)"
msgstr ""

#: ../../criteria-api.rst:833
msgid "We support the following aggregate functions:"
msgstr ""

#: ../../criteria-api.rst:835
msgid "avg(property)"
msgstr ""

#: ../../criteria-api.rst:836
msgid "avgAsDouble(property)"
msgstr ""

#: ../../criteria-api.rst:837
msgid "count()"
msgstr ""

#: ../../criteria-api.rst:838
msgid "count(property)"
msgstr ""

#: ../../criteria-api.rst:839
msgid "countDistinct(property)"
msgstr ""

#: ../../criteria-api.rst:840
msgid "max(property)"
msgstr ""

#: ../../criteria-api.rst:841
msgid "min(property)"
msgstr ""

#: ../../criteria-api.rst:842
msgid "sum(property)"
msgstr ""

#: ../../criteria-api.rst:844
msgid ""
"These are defined in the "
"``org.seasar.doma.jdbc.criteria.expression.Expressions`` class. Use them "
"with static import."
msgstr ""

#: ../../criteria-api.rst:847
msgid "For example, you can pass the ``sum`` function to the select method:"
msgstr ""

#: ../../criteria-api.rst:862
msgid "Group by expression (NativeSql)"
msgstr ""

#: ../../criteria-api.rst:877
msgid ""
"When you don't specify a group by expression, the expression is inferred "
"from the select expression automatically. So the following code issue the "
"same SQL statement above:"
msgstr ""

#: ../../criteria-api.rst:889
msgid "Having expression (NativeSql)"
msgstr ""

#: ../../criteria-api.rst:891
msgid "We support the following operators:"
msgstr ""

#: ../../criteria-api.rst:931
msgid "Dynamic having expression (NativeSql)"
msgstr ""

#: ../../criteria-api.rst:933
msgid ""
"A having expression uses only evaluated operators to build a HAVING clause."
msgstr ""

#: ../../criteria-api.rst:935
msgid ""
"When every operators are not evaluated in a having expression, the built "
"statement doesn't have any HAVING clause."
msgstr ""

#: ../../criteria-api.rst:942
msgid "Order by expression (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:944
msgid "We support the following order operations:"
msgstr ""

#: ../../criteria-api.rst:946
msgid "asc"
msgstr ""

#: ../../criteria-api.rst:947
msgid "desc"
msgstr ""

#: ../../criteria-api.rst:973
msgid "Dynamic order by expression (NativeSql)"
msgstr ""

#: ../../criteria-api.rst:975
msgid ""
"An order by expression uses only evaluated operators to build an ORDER BY "
"clause."
msgstr ""

#: ../../criteria-api.rst:977
msgid ""
"When every operators are not evaluated in a order by expression, the built "
"statement doesn't have any ORDER BY clause."
msgstr ""

#: ../../criteria-api.rst:981
msgid "Distinct expression (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1002
msgid "Limit and Offset expression (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1022
msgid "Dynamic Limit and Offset expression (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1024
msgid ""
"A limit expressions uses only non-null value to build a FETCH FIRST clause. "
"When the value is null ,the built statement doesn't have any FETCH FIRST "
"clause."
msgstr ""

#: ../../criteria-api.rst:1027
msgid ""
"As well as, an offset expressions uses only non-null value to build a OFFSET"
" clause. When the value is null ,the built statement doesn't have any OFFSET"
" clause."
msgstr ""

#: ../../criteria-api.rst:1031
msgid "For Update expression (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1050
msgid "Union expression (NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1054
msgid "union"
msgstr ""

#: ../../criteria-api.rst:1055
msgid "unionAll - (union all)"
msgstr ""

#: ../../criteria-api.rst:1078
msgid "The order by expression with index is supported:"
msgstr ""

#: ../../criteria-api.rst:1095
msgid "Derived Table expression (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1097
msgid ""
"We support subqueries using derived tables. However, an entity class "
"corresponding to the derived table is required."
msgstr ""

#: ../../criteria-api.rst:1100
msgid "Define the entity class corresponding to the derived table as follows:"
msgstr ""

#: ../../criteria-api.rst:1147
msgid "A subquery using a derived table can be written as follows."
msgstr ""

#: ../../criteria-api.rst:1188
msgid "Delete statement"
msgstr ""

#: ../../criteria-api.rst:1190
msgid ""
"For the specification of the where expression, see :ref:`criteria_where`. "
"The same rule is applied to delete statements."
msgstr ""

#: ../../criteria-api.rst:1194
msgid "Delete settings (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1199 ../../criteria-api.rst:1287
#: ../../criteria-api.rst:1432
msgid "batchSize"
msgstr ""

#: ../../criteria-api.rst:1201 ../../criteria-api.rst:1434
msgid "ignoreVersion"
msgstr ""

#: ../../criteria-api.rst:1204 ../../criteria-api.rst:1437
msgid "suppressOptimisticLockException"
msgstr ""

#: ../../criteria-api.rst:1206 ../../criteria-api.rst:1293
#: ../../criteria-api.rst:1442
msgid "They are all optional."
msgstr ""

#: ../../criteria-api.rst:1208 ../../criteria-api.rst:1295
#: ../../criteria-api.rst:1444
msgid "You can apply them as follows:"
msgstr ""

#: ../../criteria-api.rst:1226
msgid ""
"If you want to build a delete statement without a WHERE clause, you have to "
"enable the `allowEmptyWhere` setting."
msgstr ""

#: ../../criteria-api.rst:1230
msgid "Delete statement (Entityql)"
msgstr ""

#: ../../criteria-api.rst:1246
msgid "Batch Delete is also supported:"
msgstr ""

#: ../../criteria-api.rst:1257 ../../criteria-api.rst:1364
#: ../../criteria-api.rst:1395 ../../criteria-api.rst:1510
#: ../../criteria-api.rst:1540
msgid "The execute method may throw following exceptions:"
msgstr ""

#: ../../criteria-api.rst:1259 ../../criteria-api.rst:1512
msgid ""
"OptimisticLockException: if the entity has a version property and an update "
"count is 0"
msgstr ""

#: ../../criteria-api.rst:1262
msgid "Delete statement (NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1277
msgid "Insert statement"
msgstr ""

#: ../../criteria-api.rst:1280
msgid "Insert settings (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1288 ../../criteria-api.rst:1438
msgid "excludeNull"
msgstr ""

#: ../../criteria-api.rst:1289 ../../criteria-api.rst:1439
msgid "include"
msgstr ""

#: ../../criteria-api.rst:1290 ../../criteria-api.rst:1440
msgid "exclude"
msgstr ""

#: ../../criteria-api.rst:1291
msgid "ignoreGeneratedKeys"
msgstr ""

#: ../../criteria-api.rst:1331
msgid "Insert statement (Entityql)"
msgstr ""

#: ../../criteria-api.rst:1352
msgid "Batch Insert is also supported:"
msgstr ""

#: ../../criteria-api.rst:1366 ../../criteria-api.rst:1397
#: ../../criteria-api.rst:1513 ../../criteria-api.rst:1542
msgid "UniqueConstraintException: if an unique constraint is violated"
msgstr ""

#: ../../criteria-api.rst:1369
msgid "Insert statement (NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1399
msgid "We also support the INSERT SELECT syntax as follows:"
msgstr ""

#: ../../criteria-api.rst:1421
msgid "Update statement"
msgstr ""

#: ../../criteria-api.rst:1423
msgid ""
"For the specification of the where expression, see :ref:`criteria_where`. "
"The same rule is applied to update statements."
msgstr ""

#: ../../criteria-api.rst:1427
msgid "Update settings (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1475
msgid ""
"If you want to build a update statement without a WHERE clause, you have to "
"enable the `allowEmptyWhere` setting."
msgstr ""

#: ../../criteria-api.rst:1479
msgid "Update statement (Entityql)"
msgstr ""

#: ../../criteria-api.rst:1498
msgid "Batch Update is also supported:"
msgstr ""

#: ../../criteria-api.rst:1516
msgid "Update statement (NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1545
msgid "Property expressions (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1547
msgid ""
"All expression methods are defined in the "
"``org.seasar.doma.jdbc.criteria.expression.Expressions`` class."
msgstr ""

#: ../../criteria-api.rst:1550
msgid "Use them with static import."
msgstr ""

#: ../../criteria-api.rst:1553
msgid "Arithmetic expressions"
msgstr ""

#: ../../criteria-api.rst:1555
msgid "We provide the following methods:"
msgstr ""

#: ../../criteria-api.rst:1557
msgid "add - (+)"
msgstr ""

#: ../../criteria-api.rst:1558
msgid "sub - (-)"
msgstr ""

#: ../../criteria-api.rst:1559
msgid "mul - (*)"
msgstr ""

#: ../../criteria-api.rst:1560
msgid "div - (/)"
msgstr ""

#: ../../criteria-api.rst:1561
msgid "mod - (%)"
msgstr ""

#: ../../criteria-api.rst:1563
msgid "You can use the ``add`` method as follows:"
msgstr ""

#: ../../criteria-api.rst:1585
msgid "String functions"
msgstr ""

#: ../../criteria-api.rst:1587 ../../criteria-api.rst:1620
msgid "We provide the following method:"
msgstr ""

#: ../../criteria-api.rst:1589
msgid "concat"
msgstr ""

#: ../../criteria-api.rst:1590
msgid "lower"
msgstr ""

#: ../../criteria-api.rst:1591
msgid "upper"
msgstr ""

#: ../../criteria-api.rst:1592
msgid "trim"
msgstr ""

#: ../../criteria-api.rst:1593
msgid "ltrim"
msgstr ""

#: ../../criteria-api.rst:1594
msgid "rtrim"
msgstr ""

#: ../../criteria-api.rst:1596
msgid "You can use the ``concat`` method as follows:"
msgstr ""

#: ../../criteria-api.rst:1618
msgid "Literal expression"
msgstr ""

#: ../../criteria-api.rst:1622
msgid "literal (for all basic data types)"
msgstr ""

#: ../../criteria-api.rst:1624
msgid "You can use the ``literal`` method as follows:"
msgstr ""

#: ../../criteria-api.rst:1641
msgid ""
"Note that the literal expressions are not recognized as bind variables."
msgstr ""

#: ../../criteria-api.rst:1644
msgid "Case expression"
msgstr ""

#: ../../criteria-api.rst:1646 ../../criteria-api.rst:1681
msgid "We support the following method:"
msgstr ""

#: ../../criteria-api.rst:1648
msgid "when"
msgstr ""

#: ../../criteria-api.rst:1650
msgid "You can use the ``when`` method as follows:"
msgstr ""

#: ../../criteria-api.rst:1679
msgid "Subquery select expression"
msgstr ""

#: ../../criteria-api.rst:1683
msgid "select"
msgstr ""

#: ../../criteria-api.rst:1685
msgid "You can use the ``select`` method as follows:"
msgstr ""

#: ../../criteria-api.rst:1725
msgid "Scopes (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1727
msgid "Scoping allow you to specify commonly-used query conditions."
msgstr ""

#: ../../criteria-api.rst:1729
msgid ""
"To define a simple scope, create the class which has a method annotated with"
" ``@Scope``:"
msgstr ""

#: ../../criteria-api.rst:1741
msgid ""
"To enable the scope, specify the above class in the scopes element of "
"``@Metamodel``:"
msgstr ""

#: ../../criteria-api.rst:1749
msgid ""
"Now the metamodel ``Department_`` has a ``onlyTokyo`` method. You can use it"
" as follows:"
msgstr ""

#: ../../criteria-api.rst:1765
msgid ""
"When you want to combine other query conditions with scopes, compose them "
"using the `andThen` method:"
msgstr ""

#: ../../criteria-api.rst:1774
msgid "You can define several scopes in a class as follows:"
msgstr ""

#: ../../criteria-api.rst:1796
msgid "Tips"
msgstr ""

#: ../../criteria-api.rst:1799
msgid "Execution in Dao (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1801
msgid ""
"It is useful to execute DSLs in the default method of the Dao interface. To "
"get a ``config`` object, call ``Config.get(this)`` in the default method as "
"follows:"
msgstr ""

#: ../../criteria-api.rst:1818
msgid "Overwriting the table name (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1820
msgid ""
"A metamodel constructor accepts the qualified table name and the metamodel "
"overwrites its table name."
msgstr ""

#: ../../criteria-api.rst:1823
msgid "It is useful to handle two tables that have the same data structure:"
msgstr ""

#: ../../criteria-api.rst:1843
msgid "Debugging (Entityql, NativeSql)"
msgstr ""

#: ../../criteria-api.rst:1845
msgid "To know the SQL statement built by the DSLs, use the ``asSql`` method:"
msgstr ""

#: ../../criteria-api.rst:1857 ../../criteria-api.rst:1884
msgid "The above code prints as follows:"
msgstr ""

#: ../../criteria-api.rst:1864
msgid ""
"The ``asSql`` method doesn't issue the SQL statement to your Database. It "
"only builds the SQL statement and return it as an ``Sql`` object."
msgstr ""

#: ../../criteria-api.rst:1867
msgid "You can also get the ``Sql`` object by calling the ``peek`` method."
msgstr ""

#: ../../criteria-api.rst:1894
msgid "Sample projects"
msgstr ""

#: ../../criteria-api.rst:1896
msgid "`simple-examples <https://github.com/domaframework/simple-examples>`_"
msgstr ""

#: ../../criteria-api.rst:1897
msgid ""
"`spring-boot-jpetstore <https://github.com/domaframework/spring-boot-"
"jpetstore>`_"
msgstr ""

#: ../../criteria-api.rst:1898
msgid "`kotlin-sample <https://github.com/domaframework/kotlin-sample>`_"
msgstr ""
