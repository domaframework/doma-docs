msgid ""
msgstr ""
"Project-Id-Version: doma-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-17 06:37+0000\n"
"PO-Revision-Date: 2024-03-17 13:47\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: doma-docs\n"
"X-Crowdin-Project-ID: 657384\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /_build/gettext/dao.pot\n"
"X-Crowdin-File-ID: 190\n"
"Language: ja_JP\n"

#: ../../dao.rst:3
#: 8f0a3d41d8f14294a3a2ce267bbe166e
msgid "DAO interfaces"
msgstr "DAOインタフェース"

#: ../../dao.rst:6
#: e44b9729107e4f90859bbafe7ed1d2ce
msgid "Contents"
msgstr "コンテンツ"

#: ../../dao.rst:8
#: bef803840a6f4b8787d2a6752ef80bdd
msgid "Data Access Object (DAO) is interface for access to database."
msgstr "Data Access Object (DAO) は、データベースにアクセスするためのインタフェースです。"

#: ../../dao.rst:11
#: 9a8430ab04504328b6df81e49fd44561
msgid "Dao definition"
msgstr "DAO インタフェースの定義"

#: ../../dao.rst:13
#: 2aac27e8846444c59b7a5dedd2b4126f
msgid "DAOs are defined as interfaces annotated with ``@Dao``."
msgstr "DAO は ``@Dao`` アノテーションが付けられたインタフェースとして定義されます。"

#: ../../dao.rst:15
#: 46030f79a972408c8364861e7c17e711
msgid "The implementation classes of the DAO interface are generated by the annotation processor at compile time."
msgstr "DAOインタフェースの実装クラスは、アノテーションプロセッサによってコンパイル時に生成されます。"

#: ../../dao.rst:18
#: c6e898910e1a4cd9b4ff4eda3e43377a
msgid "Query definition"
msgstr "クエリ定義"

#: ../../dao.rst:20
#: 3929a18226904d53ad2015978e28f5f1
msgid ":doc:`query/index` can be defined using annotation."
msgstr ":doc:`query/index` は、アノテーションを使用して定義できます。"

#: ../../dao.rst:22
#: 739f64f529cc4b1b915ba5fea5130d54
msgid "You use :doc:`query-builder/index` in `default method`_ if you want to build query freely in Java code."
msgstr "Java コードでクエリを自由に構築したい場合は、`デフォルトメソッド`_ で :doc:`query-builder/index` を使用します。"

#: ../../dao.rst:27
#: 9e139bb9484c4ea591acde25c8c9dc66
msgid "Default method"
msgstr "デフォルトメソッド"

#: ../../dao.rst:29
#: cd0c885c805a4995a97d3d2738a5eda5
msgid "You can write java code freely in default method."
msgstr "デフォルトメソッドではJavaコードを自由に記述できます。"

#: ../../dao.rst:31
#: afb1f7d4b7af4436a9a705856fb2bdec
msgid "You can get ``Config`` instance associated dao instance if you call ``Config.get`` with argument dao instance."
msgstr "DAO インスタンスを引数として ``Config.get`` を呼び出すと、DAO インスタンスに関連付けられた ``Config`` インスタンスを取得できます。"

#: ../../dao.rst:48
#: f91f1af0c6234f3faac0fa249d5dce8a
msgid "Example"
msgstr "例"

#: ../../dao.rst:50
#: f6fec6cc56b641d490bd75bf2e533bdb
msgid "Implementation class is generated by annotation processor on compile. Implementation class is instantiated and used. But if configuration class is managed by DI container then it should be controlled to instantiate implementation class by DI container."
msgstr "DAOの実装クラスはインスタンス化して使用できます。ただし、``Config`` が依存性注入コンテナで管理されている場合はDAOのインスタンス化も依存性注入コンテナに任せるのが良いでしょう。"

#: ../../dao.rst:59
#: 9a3215a587384310ba774a79f38b585f
msgid "In default, implementation class name is interface name suffixed with ``Impl``. Please refer :doc:`annotation-processing` to change package and suffix."
msgstr "デフォルトでは、DAOの実装クラス名はインタフェース名に接尾辞 ``Impl`` を付けたものになります。パッケージとサフィックスを変更するには、:doc:`annotation-processing` を参照してください。"

#: ../../dao.rst:62
#: 808520f08514401c920daba9c88e4e82
msgid "If you use default constructor then ``DataSource`` is determined by configuration in ``config`` element of ``@Dao``. But it can instantiate with ``DataSource`` specified explicitly."
msgstr "デフォルトのコンストラクタを使用する場合、 ``DataSource`` は ``@Dao`` の ``config`` 要素の設定によって決定されます。ただし、明示的に指定された ``DataSource`` でインスタンス化することはできます。"

#: ../../dao.rst:71
#: 8096d2b5c33a44f38c9f9342fc9de01f
msgid "And also, it can instantiate with ``Connection`` specified explicitly."
msgstr "また、明示的に ``Connection`` を指定してインスタンス化することもできます。"

#: ../../dao.rst:79
#: f3f5876cdcaf47289cc25396b7adb092
msgid "Dao interface is no need to define as one to one with entity class. One dao interface can handle more than one entity classes."
msgstr "DAO インタフェースはエンティティクラスと1対1で定義する必要はありません。 1 つの DAO インタフェースで複数のエンティティクラスを扱えます。"

