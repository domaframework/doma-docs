msgid ""
msgstr ""
"Project-Id-Version: doma-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-17 05:50+0000\n"
"PO-Revision-Date: 2024-03-17 05:55\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: doma-docs\n"
"X-Crowdin-Project-ID: 657384\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /_build/gettext/dao.pot\n"
"X-Crowdin-File-ID: 190\n"
"Language: ja_JP\n"

#: ../../dao.rst:3
#: 23b852f3679c44e6879758e1b978ae1c
msgid "DAO interfaces"
msgstr "DAOインタフェース"

#: ../../dao.rst:6
#: 13d5c20738a1496fb48f6ed1283c0112
msgid "Contents"
msgstr "コンテンツ"

#: ../../dao.rst:8
#: c5dcc1128e9b4c779b2d723bde08ddb8
msgid "Data Access Object (DAO) is interface for access to database."
msgstr "Data Access Object (DAO) は、データベースにアクセスするためのインタフェースです。"

#: ../../dao.rst:11
#: 72758570b85b4de18e9e2b102fb03518
msgid "Dao definition"
msgstr "DAO インタフェースの定義"

#: ../../dao.rst:13
#: d8d97a451d3340e087a70c1d22c970ed
msgid "DAOs are defined as interfaces annotated with ``@Dao``."
msgstr "DAO は ``@Dao`` アノテーションが付けられたインタフェースとして定義されます。"

#: ../../dao.rst:15
#: 18cddcb646e34b15b9c76ffbbcc0b398
msgid "The implementation classes of the DAO interface are generated by the annotation processor at compile time."
msgstr "DAOインタフェースの実装クラスは、アノテーションプロセッサによってコンパイル時に生成されます。"

#: ../../dao.rst:18
#: 4330438033db476ca7b9634c06451e77
msgid "Query definition"
msgstr "クエリ定義"

#: ../../dao.rst:20
#: c1cecd76cb744210a675063c999e896f
msgid ":doc:`query/index` can be defined using annotation."
msgstr ":doc:`query/index` は、アノテーションを使用して定義できます。"

#: ../../dao.rst:22
#: 493e00d727034b6692075ead9763fc65
msgid "You use :doc:`query-builder/index` in `default method`_ if you want to build query freely in Java code."
msgstr "Java コードでクエリを自由に構築したい場合は、`デフォルトメソッド`_ で :doc:`query-builder/index` を使用します。"

#: ../../dao.rst:27
#: ca0e3fafed534611a26f9f8d86c1ce08
msgid "Default method"
msgstr "デフォルトメソッド"

#: ../../dao.rst:29
#: 025f273903284198a636e5c26bcd7653
msgid "You can write java code freely in default method."
msgstr "デフォルトメソッドではJavaコードを自由に記述できます。"

#: ../../dao.rst:31
#: d01915e075044b1b8259a017ecb1326b
msgid "You can get ``Config`` instance associated dao instance if you call ``Config.get`` with argument dao instance."
msgstr "DAO インスタンスを引数として ``Config.get`` を呼び出すと、DAO インスタンスに関連付けられた ``Config`` インスタンスを取得できます。"

#: ../../dao.rst:48
#: defa6603a3e446d48f665c775abd144d
msgid "Example"
msgstr "例"

#: ../../dao.rst:50
#: e6fc4f8bf02640279de21a2717e20dd1
msgid "Implementation class is generated by annotation processor on compile. Implementation class is instantiated and used. But if configuration class is managed by DI container then it should be controlled to instantiate implementation class by DI container."
msgstr "DAOの実装クラスはインスタンス化して使用できます。ただし、``Config`` が依存性注入コンテナで管理されている場合はDAOのインスタンス化も依存性注入コンテナに任せるのが良いでしょう。"

#: ../../dao.rst:59
#: 654616659fea439fb5d6a23a49951147
msgid "In default, implementation class name is interface name suffixed with ``Impl``. Please refer :doc:`annotation-processing` to change package and suffix."
msgstr "デフォルトでは、DAOの実装クラス名はインタフェース名に接尾辞 ``Impl`` を付けたものになります。パッケージとサフィックスを変更するには、:doc:`annotation-processing` を参照してください。"

#: ../../dao.rst:62
#: 87f8496e45e34a85b3bbf6332821303c
msgid "If you use default constructor then ``DataSource`` is determined by configuration in ``config`` element of ``@Dao``. But it can instantiate with ``DataSource`` specified explicitly."
msgstr "デフォルトのコンストラクタを使用する場合、 ``DataSource`` は ``@Dao`` の ``config`` 要素の設定によって決定されます。ただし、明示的に指定された ``DataSource`` でインスタンス化することはできます。"

#: ../../dao.rst:71
#: 18e877e1b9ef4028942abe03cae34526
msgid "And also, it can instantiate with ``Connection`` specified explicitly."
msgstr "また、明示的に ``Connection`` を指定してインスタンス化することもできます。"

#: ../../dao.rst:79
#: 1f3419f9e57d45a49bde57a424dbf6e1
msgid "Dao interface is no need to define as one to one with entity class. One dao interface can handle more than one entity classes."
msgstr "DAO インタフェースはエンティティクラスと1対1で定義する必要はありません。 1 つの DAO インタフェースで複数のエンティティクラスを扱えます。"

