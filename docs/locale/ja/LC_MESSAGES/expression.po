msgid ""
msgstr ""
"Project-Id-Version: doma-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-19 22:53+0900\n"
"PO-Revision-Date: 2024-03-20 12:38\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: doma-docs\n"
"X-Crowdin-Project-ID: 657384\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /_build/gettext/expression.pot\n"
"X-Crowdin-File-ID: 178\n"
"Language: ja_JP\n"

#: ../../expression.rst:3
msgid "Expression language"
msgstr "式言語"

#: ../../expression.rst:6
msgid "Contents"
msgstr "コンテンツ"

#: ../../expression.rst:8
msgid "You can write simple expressions in directives of :doc:`sql`. The grammar is almost the same as Java. However, not everything is possible that Java can do."
msgstr ":doc:`sql` のディレクティブ内に簡単な式を記述できます。文法はJavaとほぼ同じです。ただし、Java でできることの全てができるわけではありません。"

#: ../../expression.rst:14
msgid "Especially, the big difference is how to use optional types like ``java.util.Optional``. In the expression, a value of ``Optional`` type is always converted to a value of the element type automatically. For example a value of the ``Optional<String>`` type is treated as a value of ``String`` type. Therefore, we can't call methods of ``Optional`` type, nor do we call methods which have an ``Optional`` type in the parameters."
msgstr "特に大きな違いは、``java.util.Optional`` のようなオプション型の使い方です。式の中では、``Optional`` 型の値は常に要素型の値に自動的に変換されます。たとえば、``Optional<String>`` 型の値は、``String`` 型の値として扱われます。したがって、 ``Optional`` 型のメソッドを呼び出すことはできません。また、パラメータに ``Optional`` 型を持つメソッドを呼び出すこともできません。"

#: ../../expression.rst:21
msgid "When you want to check existence of a value, use ``/*%if optional != null */`` instead of ``/*%if optional.isPresent() */``."
msgstr "値の存在を確認したい場合は、``/*%if optional.isPresent() */`` ではなく ``/*%if optional != null */`` を使用します。"

#: ../../expression.rst:24
msgid "The same is true for ``java.util.OptionalInt``, ``java.util.OptionalDouble``, and ``java.util.OptionalLong``."
msgstr "``java.util.OptionalInt``、``java.util.OptionalDouble``、および ``java.util.OptionalLong`` についても同様です。"

#: ../../expression.rst:28
msgid "Literals"
msgstr "リテラル"

#: ../../expression.rst:30
msgid "You can use the following literals:"
msgstr "次のリテラルを使用できます。"

#: ../../expression.rst:33
msgid "Literal"
msgstr "リテラル"

#: ../../expression.rst:33
msgid "Type"
msgstr "型"

#: ../../expression.rst:35
msgid "null"
msgstr ""

#: ../../expression.rst:35
msgid "void"
msgstr ""

#: ../../expression.rst:37
msgid "true"
msgstr ""

#: ../../expression.rst:37
#: ../../expression.rst:39
msgid "boolean"
msgstr ""

#: ../../expression.rst:39
msgid "false"
msgstr ""

#: ../../expression.rst:41
msgid "10"
msgstr ""

#: ../../expression.rst:41
msgid "int"
msgstr ""

#: ../../expression.rst:43
msgid "10L"
msgstr ""

#: ../../expression.rst:43
msgid "long"
msgstr ""

#: ../../expression.rst:45
msgid "0.123F"
msgstr ""

#: ../../expression.rst:45
msgid "float"
msgstr ""

#: ../../expression.rst:47
msgid "0.123D"
msgstr ""

#: ../../expression.rst:47
msgid "double"
msgstr ""

#: ../../expression.rst:49
msgid "0.123B"
msgstr ""

#: ../../expression.rst:49
msgid "java.math.BigDecimal"
msgstr ""

#: ../../expression.rst:51
msgid "'a'"
msgstr ""

#: ../../expression.rst:51
#: ../../expression.rst:155
msgid "char"
msgstr ""

#: ../../expression.rst:53
msgid "\"a\""
msgstr ""

#: ../../expression.rst:53
#: ../../expression.rst:153
msgid "java.lang.String"
msgstr ""

#: ../../expression.rst:56
msgid "The numeral types are distinguished by suffix letters such as ``L`` or ``F`` at the end of the literals. The suffixes must be capital letters."
msgstr "数値の種類は、リテラルの末尾にある ``L`` や ``F`` などの接尾辞によって区別されます。接尾辞は大文字である必要があります。"

#: ../../expression.rst:67
msgid "Comparison operators"
msgstr "比較演算子"

#: ../../expression.rst:69
msgid "You can use the following comparison operators:"
msgstr "次の比較演算子を使用できます。"

#: ../../expression.rst:72
#: ../../expression.rst:104
#: ../../expression.rst:126
msgid "Operator"
msgstr "演算子"

#: ../../expression.rst:72
#: ../../expression.rst:104
#: ../../expression.rst:126
msgid "Description"
msgstr "説明"

#: ../../expression.rst:74
msgid "=="
msgstr ""

#: ../../expression.rst:74
msgid "Equal to operator"
msgstr "等値演算子"

#: ../../expression.rst:76
msgid "!="
msgstr ""

#: ../../expression.rst:76
msgid "Not equal to operator"
msgstr "不等値演算子"

#: ../../expression.rst:78
msgid "<"
msgstr ""

#: ../../expression.rst:78
msgid "Less than operator"
msgstr "小なり演算子"

#: ../../expression.rst:80
msgid "<="
msgstr ""

#: ../../expression.rst:80
msgid "Less than or equal to operator"
msgstr "小なりイコール演算子"

#: ../../expression.rst:82
msgid ">"
msgstr ""

#: ../../expression.rst:82
msgid "Greater than operator"
msgstr "大なり演算子"

#: ../../expression.rst:84
msgid ">="
msgstr ""

#: ../../expression.rst:84
msgid "Greater than or equal to operator"
msgstr "大なりイコール演算子"

#: ../../expression.rst:87
msgid "To use comparison operators, operands must implement ``java.lang.Comparable``."
msgstr "比較演算子を使用するには、被演算子で ``java.lang.Comparable`` を実装する必要があります。"

#: ../../expression.rst:89
msgid "The operands for ``<``, ``<=``, ``>`` and ``>=`` must not be ``null``."
msgstr "``<``, ``<=``, ``>`` と ``>=`` の 被演算子 は ``null`` であってはなりません。"

#: ../../expression.rst:99
msgid "Logical operators"
msgstr "論理演算子"

#: ../../expression.rst:101
msgid "You can use the following logical operators:"
msgstr "次の論理演算子を使用できます。"

#: ../../expression.rst:106
msgid "!"
msgstr ""

#: ../../expression.rst:106
msgid "Logical NOT operator"
msgstr "論理否定演算子"

#: ../../expression.rst:107
msgid "&&"
msgstr ""

#: ../../expression.rst:107
msgid "Logical AND operator"
msgstr "論理積演算子"

#: ../../expression.rst:108
msgid "||"
msgstr ""

#: ../../expression.rst:108
msgid "Logical OR operator"
msgstr "論理和演算子"

#: ../../expression.rst:111
msgid "With parentheses, you can override the precedence of operators."
msgstr "括弧を使用すると、演算子の優先順位をオーバーライドできます。"

#: ../../expression.rst:121
msgid "Arithmetic operators"
msgstr "算術演算子"

#: ../../expression.rst:123
msgid "You can use the following arithmetic operators:"
msgstr "次の算術演算子を使用できます。"

#: ../../expression.rst:128
msgid "\\+"
msgstr ""

#: ../../expression.rst:128
msgid "Additive operator"
msgstr "加法演算子"

#: ../../expression.rst:130
msgid "\\-"
msgstr ""

#: ../../expression.rst:130
msgid "Subtraction operator"
msgstr "減算演算子"

#: ../../expression.rst:132
msgid "\\*"
msgstr ""

#: ../../expression.rst:132
msgid "Multiplication operator"
msgstr "乗算演算子"

#: ../../expression.rst:134
msgid "/"
msgstr ""

#: ../../expression.rst:134
msgid "Division operator"
msgstr "除算演算子"

#: ../../expression.rst:136
msgid "%"
msgstr ""

#: ../../expression.rst:136
msgid "Remainder operator"
msgstr "剰余演算子"

#: ../../expression.rst:139
msgid "Operands must be numeric type."
msgstr "被演算子は数値型である必要があります。"

#: ../../expression.rst:147
msgid "String concatenation operator"
msgstr "文字列連結演算子"

#: ../../expression.rst:149
msgid "You can concatenate characters using a concatenation operator ``+``."
msgstr "連結演算子 ``+`` を使用して文字を連結できます。"

#: ../../expression.rst:151
msgid "The operand must be one of the following types:"
msgstr "被演算子は次のいずれかのタイプである必要があります。"

#: ../../expression.rst:154
msgid "java.lang.Character"
msgstr ""

#: ../../expression.rst:163
msgid "Calling instance methods"
msgstr "インスタンスメソッドの呼び出し"

#: ../../expression.rst:165
msgid "You can call instance methods with the method names separated by dots ``.``. The method visibility must be public."
msgstr "メソッド名をドット ``.`` で区切ってインスタンスメソッドを呼び出すことができます。メソッドの可視性はパブリックである必要があります。"

#: ../../expression.rst:175
msgid "If the method has no argument, specify ``()`` after the method name."
msgstr "メソッドに引数がない場合は、メソッド名の後に ``()`` を指定します。"

#: ../../expression.rst:185
msgid "Accessing to instance fields"
msgstr "インスタンスフィールドへのアクセス"

#: ../../expression.rst:187
msgid "You can access instance fields with the field names separated by dots ``.``. Even if the visibility is private, you can access it."
msgstr "フィールド名をドット ``.`` で区切ってインスタンスフィールドにアクセスできます。可視性が非公開であっても、アクセスできます。"

#: ../../expression.rst:196
msgid "Calling static methods"
msgstr "静的メソッドの呼び出し"

#: ../../expression.rst:198
msgid "You can call static methods by continuing the method names with the fully qualified class names enclosed in ``@``. The method visibility must be public."
msgstr "静的メソッドを呼び出すには、 ``@`` で囲んだ完全修飾クラス名をメソッド名に続けます。メソッドの可視性はパブリックである必要があります。"

#: ../../expression.rst:210
msgid "Accessing to static fields"
msgstr "静的フィールドへのアクセス"

#: ../../expression.rst:212
msgid "You can access static fields by continuing the field name with the fully qualified class name enclosed in ``@``. Even if the visibility is private, you can access it."
msgstr "静的フィールドにアクセスするには、フィールド名に ``@`` で囲まれた完全修飾クラス名を続けます。可視性が非公開であっても、アクセスできます。"

#: ../../expression.rst:224
msgid "Using built-in functions"
msgstr "組み込み関数の使用"

#: ../../expression.rst:226
msgid "Built-in functions are utilities mainly for changing values of binding variables before binding them to SQL."
msgstr "組み込み関数は、主に SQL にバインドする前にバインド変数の値を変更するためのユーティリティです。"

#: ../../expression.rst:229
msgid "For example, when you run a prefix search with a LIKE clause, you can write like this:"
msgstr "たとえば、LIKE 句を使用して前方検索を実行する場合は、次のように記述できます。"

#: ../../expression.rst:237
msgid "``@prefix(employee.employeeName)`` means that we pass ``employee.employeeName`` to the ``@prefix`` function. The ``@prefix`` function converts the character sequence which is received by the parameter to a string for forward match search. It also escapes special characters. For example, if the value of ``employee.employeeName`` is ``ABC``, it's converted to ``ABC%``. If the value of ``employee.employeeName`` contains ``%`` such as ``AB%C``, the ``%`` is escaped with a default escape sequence ``$``, therefore the value is converted to ``AB$%C%``."
msgstr "``@prefix(employee.employeeName)`` は、``@prefix`` 関数に ``employee.employeeName`` を渡すことを意味します。 ``@prefix`` 関数はパラメータで受け取った文字列を前方一致検索用の文字列に変換します。特殊文字もエスケープされます。たとえば、 ``employee.employeeName`` の値が ``ABC`` の場合、 ``ABC%`` に変換されます。 ``employee.employeeName`` の値に ``AB%C`` などの ``%`` が含まれている場合、その ``%`` はデフォルトのエスケープシーケンス ``$`` でエスケープされるため、値は ``AB$%C%`` に変換されます。"

#: ../../expression.rst:247
msgid "You can use following function signatures:"
msgstr "次の関数シグネチャを使用できます。"

#: ../../expression.rst:253
msgid "String @escape(CharSequence text, char escapeChar = '$')"
msgstr ""

#: ../../expression.rst:250
msgid "Escapes the character sequence for LIKE operation. The return value is a string which is a result of escaping the character sequence. If ``escapeChar`` isn't specified, ``$`` is used as a default escape sequence. It returns ``null`` if you pass ``null`` as a parameter."
msgstr "LIKE 操作の文字シーケンスをエスケープします。戻り値は文字列をエスケープした結果の文字列です。 ``escapeChar`` が指定されていない場合、デフォルトのエスケープシーケンスとして ``$`` が使用されます。パラメータとして ``null`` を渡すと ``null`` を返します。"

#: ../../expression.rst:260
msgid "String @prefix(CharSequence prefix, char escapeChar = '$')"
msgstr ""

#: ../../expression.rst:256
msgid "Converts the character sequence for prefix search. The return value is a string which is a result of escaping the character sequence and adding a wild card character at the end. If ``escapeChar`` isn't specified, ``$`` is used as a default escape sequence. It returns ``null`` if you pass ``null`` as a parameter."
msgstr "前方一致検索用の文字列へ変換します。戻り値は、文字シーケンスをエスケープし、末尾にワイルドカード文字を追加した結果の文字列です。 ``escapeChar`` が指定されていない場合、デフォルトのエスケープシーケンスとして ``$`` が使用されます。パラメータとして ``null`` を渡すと ``null`` を返します。"

#: ../../expression.rst:267
msgid "String @infix(CharSequence infix, char escapeChar = '$')"
msgstr ""

#: ../../expression.rst:263
msgid "Converts the character sequence for infix search. The return value is a string which is a result of escaping the character sequence and adding wild card characters at the beginning and the end. If ``escapeChar`` isn't specified, ``$`` is used as a default escape sequence. It returns ``null`` if you pass ``null`` as a parameter."
msgstr "中置検索用の文字列へ変換します。戻り値は、文字シーケンスをエスケープし、先頭と末尾にワイルドカード文字を追加した結果の文字列です。 ``escapeChar`` が指定されていない場合、デフォルトのエスケープシーケンスとして ``$`` が使用されます。パラメータとして ``null`` を渡すと ``null`` を返します。"

#: ../../expression.rst:274
msgid "String @suffix(CharSequence suffix, char escapeChar = '$')"
msgstr ""

#: ../../expression.rst:270
msgid "Converts the character sequence for suffix search. The return value is a string which is a result of escaping the character sequence and adding a wild card character at the beginning. If ``escapeChar`` isn't specified, ``$`` is used as a default escape sequence. It returns ``null`` if you pass ``null`` as a parameter."
msgstr "接尾辞検索用の文字列へ変換します。戻り値は、文字シーケンスをエスケープし、先頭にワイルドカード文字を追加した結果の文字列です。 ``escapeChar`` が指定されていない場合、デフォルトのエスケープシーケンスとして ``$`` が使用されます。パラメータとして ``null`` を渡すと ``null`` を返します。"

#: ../../expression.rst:279
msgid "java.util.Date @roundDownTimePart(java.util.Date date)"
msgstr ""

#: ../../expression.rst:277
#: ../../expression.rst:282
msgid "Rounds down the time part. The return value is a new Date which is rounded down the time part. It returns ``null`` if you pass ``null`` as a parameter."
msgstr "時刻部分を切り捨てます。戻り値は、時刻部分を切り捨てた新しい日付です。パラメータとして ``null`` を渡すと ``null`` を返します。"

#: ../../expression.rst:284
msgid "java.sql.Date @roundDownTimePart(java.sql.Date date)"
msgstr ""

#: ../../expression.rst:289
msgid "java.sql.Timestamp @roundDownTimePart(java.sql.Timestamp timestamp)"
msgstr ""

#: ../../expression.rst:287
msgid "Rounds down the time part. The return value is a new Timestamp which is rounded down the time part. It returns ``null`` if you pass ``null`` as a parameter."
msgstr "時刻部分を切り捨てます。戻り値は、時刻部分を切り捨てた新しいタイムスタンプです。パラメータとして ``null`` を渡すと ``null`` を返します。"

#: ../../expression.rst:294
msgid "java.time.LocalDateTime @roundDownTimePart(java.time.LocalDateTime localDateTime)"
msgstr ""

#: ../../expression.rst:292
msgid "Rounds down the time part. The return value is a new LocalDateTime which is rounded down the time part. It returns ``null`` if you pass ``null`` as a parameter."
msgstr "時刻部分を切り捨てます。戻り値は、時刻部分を切り捨てた新しい LocalDateTime です。パラメータとして ``null`` を渡すと ``null`` を返します。"

#: ../../expression.rst:299
msgid "java.util.Date @roundUpTimePart(java.util.Date date)"
msgstr ""

#: ../../expression.rst:297
#: ../../expression.rst:302
msgid "Rounds up the time part. The return value is a new Date which is rounded up the time part. It returns ``null`` if you pass ``null`` as a parameter."
msgstr "時刻部分を切り上げます。戻り値は、時刻部分を切り上げた新しい日付です。パラメータとして ``null`` を渡すと ``null`` を返します。"

#: ../../expression.rst:304
msgid "java.sql.Date @roundUpTimePart(java.sql.Date date)"
msgstr ""

#: ../../expression.rst:309
msgid "java.sql.Timestamp @roundUpTimePart(java.sql.Timestamp timestamp)"
msgstr ""

#: ../../expression.rst:307
msgid "Rounds up the time part. The return value is a new Timestamp which is rounded up the time part. It returns ``null`` if you pass ``null`` as a parameter."
msgstr "時刻部分を切り上げます。戻り値は、時刻部分を切り上げた新しいタイムスタンプです。パラメータとして ``null`` を渡すと ``null`` を返します。"

#: ../../expression.rst:314
msgid "java.time.LocalDateTime @roundUpTimePart(java.time.LocalDateTime localDateTime)"
msgstr ""

#: ../../expression.rst:312
msgid "Rounds up the time part. The return value is a new LocalDateTime which is rounded up the time part. It returns ``null`` if you pass ``null`` as a parameter."
msgstr "時間部分を切り上げます。戻り値は、時刻部分を切り上げた新しい LocalDateTime です。パラメータとして ``null`` を渡すと ``null`` を返します。"

#: ../../expression.rst:319
msgid "java.time.LocalDate @roundUpTimePart(java.time.LocalDate localDate)"
msgstr ""

#: ../../expression.rst:317
msgid "Returns the next day. The return value is a new LocalDate which is the next one after the argument. It returns ``null`` if you pass ``null`` as a parameter."
msgstr "翌日返却。戻り値は、引数の次の新しい LocalDate です。パラメータとして ``null`` を渡すと ``null`` を返します。"

#: ../../expression.rst:322
msgid "boolean @isEmpty(CharSequence charSequence)"
msgstr ""

#: ../../expression.rst:322
msgid "Returns ``true`` if the character sequence is ``null`` or the length is ``0``."
msgstr "文字シーケンスが ``null`` または長さが ``0`` の場合は ``true`` を返します。"

#: ../../expression.rst:325
msgid "boolean @isNotEmpty(CharSequence charSequence)"
msgstr ""

#: ../../expression.rst:325
msgid "Returns ``true`` if the character sequence isn't ``null`` and the length isn't ``0``."
msgstr "文字シーケンスが ``null`` でなく、長さが ``0`` でない場合は ``true`` を返します。"

#: ../../expression.rst:329
msgid "boolean @isBlank(CharSequence charSequence)"
msgstr ""

#: ../../expression.rst:328
msgid "Returns ``true`` only if the character sequence is ``null``, the length is ``0``, or the sequence is formed with whitespaces only."
msgstr "文字シーケンスが ``null`` であるか、長さが ``0`` であるか、または文字シーケンスが空白のみで形成されている場合にのみ ``true`` を返します。"

#: ../../expression.rst:333
msgid "boolean @isNotBlank(CharSequence charSequence)"
msgstr ""

#: ../../expression.rst:332
msgid "Returns ``true`` if the character sequence isn't ``null``, the length isn't ``0``, and the sequence isn't formed with whitespaces only."
msgstr "文字列が ``null`` でなく、長さが ``0`` でなく、文字列が空白だけで形成されていない場合は ``true`` を返します。"

#: ../../expression.rst:335
msgid "These functions are correspond to the methods of ``org.seasar.doma.expr.ExpressionFunctions``."
msgstr "これらの関数は ``org.seasar.doma.expr.ExpressionFunctions`` のメソッドに対応します。"

#: ../../expression.rst:338
msgid "Using custom functions"
msgstr "カスタム関数の使用"

#: ../../expression.rst:340
msgid "You can define and use your own functions."
msgstr "独自の関数を定義して使用できます。"

#: ../../expression.rst:342
msgid "You need to follow these settings when you use custom functions which you define by yourself:"
msgstr "自分で定義したカスタム関数を使用する場合は、次の設定に従う必要があります。"

#: ../../expression.rst:344
msgid "The function is defined as a method of a class which implements ``org.seasar.doma.expr.ExpressionFunctions``."
msgstr "この関数は ``org.seasar.doma.expr.ExpressionFunctions`` を実装したクラスのメソッドとして定義される"

#: ../../expression.rst:346
msgid "The method is a public instance method."
msgstr "このメソッドはパブリック インスタンス メソッドである"

#: ../../expression.rst:347
msgid "The class is registered as an option in :doc:`annotation-processing`. The key of the option is ``doma.expr.functions``."
msgstr "このクラスは ``doma.expr.functions`` をキーとして :doc:`annotation-processing` のオプションに指定される"

#: ../../expression.rst:349
msgid "The instance of the class you create is used in an RDBMS dialect in your configuration class (The implementations of RDBMS dialect provided by Doma can receive ``ExpressionFunctions`` in the constructor)."
msgstr "作成したクラスのインスタンスは SQLダイアレクト で使用される (Doma によって提供される ダイアレクト の実装は コンストラクタで ``ExpressionFunctions`` を受け取ることができる)"

#: ../../expression.rst:353
msgid "To call a custom function, add ``@`` at the beginning of the function name like built-in functions. For example, you can call ``myfunc`` function like this:"
msgstr "カスタム関数を呼び出す場合は、組み込み関数と同様に関数名の先頭に ``@`` を付けます。たとえば、次のように ``myfunc`` 関数を呼び出すことができます。"

