==================
DAO interfaces
==================

.. contents:: Contents
   :depth: 3

Data Access Object (DAO) is an interface for accessing databases.

DAO definition
==================

DAOs are defined as interfaces annotated with ``@Dao``.

The implementation classes of the DAO interface are generated by the annotation processor at compile time.

Query definition
==================

:doc:`query/index` can be defined using annotations.

You can use :doc:`query-builder/index` in `default method`_ if you want to build queries flexibly in Java code.

.. _dao-default-method:

Default method
==================

You can write Java code freely in default methods.

You can get the ``Config`` instance associated with a DAO instance by calling ``Config.get`` with the DAO instance as an argument.


.. code-block:: java

  @Dao
  public interface EmployeeDao {

      default int count() {
          Config config = Config.get(this);
          SelectBuilder builder = SelectBuilder.newInstance(config);
          builder.sql("select count(*) from employee");
          return builder.getScalarSingleResult(int.class);
      }
  }

Example
==================

Implementation classes are generated by the annotation processor during compilation.
These implementation classes are instantiated and used.
However, if the configuration class is managed by a DI container, then the DI container should control the instantiation of the implementation class.

.. code-block:: java

  EmployeeDao employeeDao = new EmployeeDaoImpl();
  Employee employee = employeeDao.selectById(1);

By default, the implementation class name is the interface name suffixed with ``Impl``.
Please refer to :doc:`annotation-processing` to change the package and suffix.

If you use the default constructor, then the ``DataSource`` is determined by the configuration in the ``config`` element of ``@Dao``.
However, you can also instantiate with an explicitly specified ``DataSource``.

.. code-block:: java

  DataSource dataSource = ...;
  EmployeeDao employeeDao = new EmployeeDaoImpl(dataSource);
  Employee employee = employeeDao.selectById(1);

Additionally, you can instantiate with an explicitly specified ``Connection``.

.. code-block:: java

  Connection connection = ...;
  EmployeeDao employeeDao = new EmployeeDaoImpl(connection);
  Employee employee = employeeDao.selectById(1);

A DAO interface does not need to be defined in a one-to-one relationship with an entity class.
One DAO interface can handle multiple entity classes.

.. code-block:: java

  @Dao
  public interface MyDao {

      @Select
      Employee selectEmployeeById(int id);

      @Select
      Department selectDepartmentByName(String name);

      @Update
      int updateAddress(Address address);
  }
